{"version":3,"sources":["src\\Assets\\AssetManager.js","src\\Point.js","src\\Hitbox.js","src\\Pathfinding\\Node.js","src\\Pathfinding\\AStarFinder.js","src\\Pathfinding\\Network.js","src\\Pathfinding\\Pathfinder.js","src\\Entity.js","src\\Obstacle.js","src\\VillageCentre.js","src\\Task.js","src\\Villager.js","src\\Village.js","src\\Map.js","src\\Engine.js","index.js"],"names":["initializeImage","imgPath","Promise","resolve","reject","img","Image","src","onload","onerror","AssetManager","constructor","imagesToLoad","villagerStill","onLoad","all","map","Point","x","y","_operation","value","transform","add","pointOrX","addition","point","console","error","sub","subtraction","multiply","checkEquals","getNormalised","total","Math","sqrt","getDifference","getMagnitude","Hitbox","width","height","pos","detectCollision","boxOrPoint","box","draw","ctx","strokeRect","newX","newY","Node","distanceMultiplier","getDistance","node","pow","addToPriorityQueue","priorityQueue","item","queueIndex","instance","totalValue","slice","initPriorityQueue","srcNode","destNode","aList","checkLineOfSight","reduce","index","totalWeight","prevNodeIndex","aStarFinder","checkSuccess","dest","currNode","checkedNodes","lineOfSight","breakCounter","length","Error","shift","canSeeDest","edge","edges","some","hierarchicalValue","dist","priorityEdgeIndex","findIndex","el","priorityEdge","splice","push","fastestRoute","lastIndex","unshift","find","log","Network","obstacles","nodeWidth","nodeHeight","adjacencyList","update","_checkLineOfSight","node1","node2","gradient","xt","xb","node1Top","node1Bottom","checkLowerBound","checkUpperBound","roundingOffset","surroundingBox","max","obstacle","hitbox","obsTop","obsBottom","addNode","newNode","newInstance","i","currIndex","Number","getShortestRoute","bind","strokeStyle","beginPath","moveTo","lineTo","stroke","Pathfinder","networks","_getNetworkKey","_getNetwork","key","addNetwork","_buildNetwork","network","nodeList","focusedObstacle","nodes","getNodes","filter","checkCollision","updateNetworks","Object","values","destinationPoint","drawNetwork","Entity","Obstacle","xDir","yDir","VillageCentre","Task","name","action","data","still","still_path","Villager","sideLength","actions","pathfind","task","points","taskQueue","speed","diff","norm","diffMagnitude","addTask","done","call","random","imgWidth","imgHeight","concat","drawImage","Village","villageCentre","villagers","registerObstacle","newVillager","villager","Map","mapLimit","pathfinder","villages","_testHitbox","village","Engine","canvas","fillStyle","fillRect","document","getElementById","getContext","imageSmoothingEnabled","game","assetManager","run","requestAnimationFrame","initialise"],"mappings":";;;;;;;;;AAAA;ACAA,MAAMiB,KAAN,CAAY;AACRN,gBAAYO,IAAI,CAAhB,EAAmBC,IAAI,CAAvB,EAA0B;AACtB,aAAKD,CAAL,GAASA,CAAT;ACFR,ADGQ,aAAKC,CAAL,GAASA,CAAT;AACH;ADFL,AGFA,MHEMnB,kBAAkBC,WACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B,AIJR,AHMIgB,SGNKoC,CJIKnD,KCECgB,CDFK,IAAIf,ACEpB,EAAkBgB,GDFF,EAAZ,AIJR,CAA4BmC,GHMxB,EAA6B,QGNjC,EAA2CC,IAA3C,EAAiD;AJKzCrD,AIJJ,AHMI,QDFIE,AIJJoD,CHMC,EDFD,GAAU1D,ACEJiB,CAAN,EAAS,IDFT,AIJa,CAAjB,AHMkBC,CAAd,IAAmBG,UAAUD,KAAV,CAAnB;ADDAhB,ACEH,QDFOG,MAAJ,GAAaL,OAAb;AACAE,AELR,AECI,ACHJ,MHEMkC,EFKM9B,CIJH,GFDT,CAAa,AECAmD,EJIL,GAAcxD,GIJlB,GJII,CIJiBqD,aAArB,EAAoC;AJKnC,AELD9C,AECI,AHMJY,CDPA,CADJ,MCQQC,IGNIoC,IFDIpC,ADOZ,EAAcL,GGNG0C,CHMC,ECPlB,EAAsB1C,ADOtB,CCPA,CDOwB,CCPCqB,EECjB,GFDR,AEC8BkB,EFDEjB,GECGoB,MFDM,IAAzC,AECI,EFD2C,AECA;AFA3C,AECIF,ADHZ,AGFA,ALWQ,METFR,IAAN,CAAW,CDEC3B,ADOAC,WAAWC,SCPST,ADOA,CAAC,KAAKC,CAAL,GAASQ,KCPlC,CDOwCR,CCPT,ADOP,EAAmB,KAAKC,CAAL,GAASO,MAAMP,CAAlC,CAAxB;ADDR,AELY,AECH,ADHLR,MHOED,GINE,MAEO,CDHCc,CDECkB,CFKjB,CAAmB,CELP,GAAW,CCFnB,EAAsBvB,CDECF,ACFvB,EAAyBmC,aDEN,CAAU5B,OCFiB,CAA9C,CDEsCN,CAAnB,ACF8B,EDERM,SAASL,CAA/B,CAAX;AFMRR,AOXJ,ALMY,AECA,ACNZ,AFGQ,AFSA,YETIa,AFSAA,KCPKgB,CFKC,IELN,GAAarB,CAAb,MCFoBF,AFSAA,KAAxB,EAA+B,QET/B,EAA+B;AHQ/B,AELI,AECH,ADHG,AFSA,aDFCL,IELI6B,ACFAC,AFSAtB,GETL,GDEA,ACFW,EHOf,CELkBoB,CCFCvB,AFSf,CDFgB,ACEAO,CDFCX,EELjB,KDOA,EAA0BY,IETf,CAAUD,CHOL,CAApB,CCEI,MET8BN,CAAnB,EAAsBM,SAASL,CAA/B,CAAX;AHQP,AELI,AMRT,AJSK,ADHO,AGLZ,ALcS,SCXD,ADSA,MCLO,ADOA,EETEiC,EFSE,OAAO5B,QAAP,CETP,GAA0BL,CFSC,IETI,CAA/B,GFSO,IAAgC,OAAOA,CAAP,KAAa,QAAjD,EAA2D;ACN9D,ACFH,AFSG,SEZJ,MAGO,EDEEuB,ADOAtB,GCPL,GAAW,IAAIH,ADOf,CAAgB,IAAIA,KAAJ,CAAUO,ICPf,CAAUA,GDOL,EAAoBL,CAApB,CAAhB,CCPW,CDO6BM,CCPTN,CAApB,CAAX,KDOA;ADDRL,AELQ,AECR,ACTJ,AFMY,AFSH,AQjBT,SRee,EGJJ,CAAC,CJIC,EIJE2C,AHMA,ECPEjB,ACFAE,GAAL,EDEA,CCFW,EDEEF,ECFEvB,ECGE6C,CFDjB,IECG,CAAoB,CAApB,EAAuBH,IDHf,CAAUnC,KCGlB,CAAJ,EAAwCkC,ADH5B,EAAoBvC,CAApB,CCGZ,ADHC,ECG6C,GAAGsC,cAAcK,KAAd,CAAoBH,UAApB,CAAjD,CAAP;AJKI,AELI,AECX,ADHW,AFSAhC,ASlBZ,MAAMoI,IAAN,CAAW,IVgBI7J,EELEuC,ACFAW,GFSGxB,GDFGb,AELX,EDOA,CDFG,AELW0B,ADOA,CDFC,KAAK7B,AELpB,GCFA,GAA0BwC,MHOX,CAAkBpC,GAAlB,CAAsBhB,OGPrC,QHOe,CAAZ,CAAP,eCEI;ADDP,AOfL,ALUS,AMXT,ALSS,AGRT,ALiBS,ASlBLW,MHCE+I,MAAN,CAAa,GGDGM,IAAZ,EAAkBC,MAAlB,EAA0BC,OAAO,EAAjC,EAAqC;AVStB,AOPfvJ,ALUC,AECL,ADHK,AFSA,ASlBG,SNYCoD,IMZIiG,GHCG9I,CAAZ,AGDI,EHCWC,CAAf,AGDgB6I,EHCExH,EGDd,ENYR,CGXI,AHWuBwB,EGXEvB,KHW7B,CGXI,CHWgCwB,CGXC,OHWrC,EAA8CC,KAA9C,EAAqDC,gBAArD,EAAuE;AGV/D,AHWJ,ACZJ,AKAQ,ACHR,WPeWD,EGXEqD,AGDA0C,INYI7F,EGXT,AGDA,GHCc,AGDA6F,CNYX,CAAa,CAACxG,CGXClB,EGDlB,UNYgB,EAAgB,EGXlB,AHWoBe,CGXTpC,CAAX,EAAcC,AHWI,CGXlB,CHWE,CGXeqB,CHWW6B,IGX5B,CHWE,CGXsB5B,IHWc,EGXtC,CAAd;AACH,ALUDE,AECI,ADHJU,AFSAxB,ASlBI,QTkBAL,IGNI2C,CMZC+F,GPSG5G,AFSZ,CSlBI,CVgBO5C,ACEGS,ECPEyB,ACFhB,AOTgBsH,EPSE,AFSA,ESlBd,ETkBJ,EAAwB,CGNClG,CFDzB,EAA4B,IECpB,EAA0BV,IAA1B,CAAJ,EAAqC;AFArC,AECI,ADHJ,AFSA,AWvBR,AHEA,MAAMwG,MPcMjH,ADOAf,GETG,GDEGc,AECA0B,CKflB,CNYoBlB,MFSM1B,ECPlB,AOdoBiI,ILeI3F,GHMG,CAAC,EETrB,ECGyBX,CDHClB,AFSAjB,CAAL,GAASQ,CETCU,AMZ9C,CAAqC,GNYI,CCGT,ADHmBD,AFSAjB,CGNCoC,AHMjB,EAAmB,EGNtB,ADHwBC,CCG5C,EDHuC,AFSQpC,CETC,AFSN,GAASO,EETER,CAAL,GAASoC,AFSAnC,CAAlC,CAA3B,GETkED,CAAvB,EAA0B,CAA1B,IAA+BiB,KAAKoB,GAAL,CAAS,KAAKpC,CAAL,GAASmC,KAAKnC,CAAvB,EAA0B,CAA1B,CAAzC,CAAjC;AIPJ,ALUI,ACFH,AOTG,ADHJR,QFII+B,GAAJ,CLUQE,EKVE,CGDC,CDHC1B,CAAZ,ECGI,ADHWC,CAAf,EAAkB,YPcYF,eAA1B,EAAiC4B,MAAM,IAAIN,MAAJ,CAAWK,UAAX,EAAuB,CAAvB,EAA0B,CAA1B,CAAN;AajBzC,ARQQ,AMRR,ALGA,AJgBY,AEfZ,ALqBQ,ASlBH,ADHG,AEHR,MHEM+G,AFCApB,MLqBM/G,EOtBZ,ACCcN,CFIC,AEJP,CHAR,CAAiB,AGAAC,CAAT,CLeWqC,CGXC+D,AEJA,EAAZ,CDDemC,CCCC,EFIT,AEJP,CFImBhH,GAAnB,ENiBwBzB,KAAxB,CGN8BwC,CIhBtC,APsBuC,COtBT,WJgBX,EAAkC;AGVhD,ALUG,AMfJyF,AJgBY7E,ADHZ,AGZA1D,ALqBQ,AS1BD,ADKN,QNYGO,CAAJ,GAAQ,CKbCqG,ENgBD1E,CIfI7B,CLqBCI,EOtBb,AFCA,EEDiB,AJegC,AEdhC,MLqBT,CAAgBI,ECNDe,MAAf,ADMA,EAA0BT,ECL1B,KAAKZ,CAAL,GAAS,ADKT,KCLcsB,KAAL,GAAa,CAAtB,GAA0BK,IAAI3B,CAAJ,GAAQ2B,IAAIL,KAAJ,GAAY,CAD9C,IAEAK,IAAI3B,CAAJ,GAAQ2B,IAAIL,KAAJ,GAAY,CAApB,GAAwB,KAAKtB,CAAL,GAAS,KAAKsB,KAAL,GAAa,CAF9C,IAGA,KAAKrB,CAAL,GAAS,KAAKsB,MAAL,GAAc,CAAvB,GAA2BI,IAAI1B,CAAJ,GAAQ0B,IAAIJ,MAAJ,GAAa,CAHhD,IAIAI,IAAI1B,CAAJ,GAAQ0B,IAAIJ,MAAJ,GAAa,CAArB,GAAyB,KAAKtB,CAAL,GAAS,KAAKsB,MAAL,GAAc,CALpD;AYnBR,AZ0BK,AMrBG,AJgBQ8B,AChBhB,AFaQ,AGZA,ALqBC,AW1BT,AHCqC,MJG/B4B,GJoBE,GOpBI8C,CHAZ,ACCajI,CDDC,CFaC,AFSA,CKrBP,GAAWA,ALqBA,COtBC,ALaA0B,EKbZ,AFCA,CHYO,CAASxB,CAAhB,CFSkBM,KGNK,CAAC,CAFqB,CHQlC,KAAoB,QAApB,IAAgC,OAAOL,CAAP,KAAa,QAAjD,EAA2D;AMhBtE,ACLI,AJgBQ0C,AChBZlD,AFaC,AGZG,ALqBI,QMjBJO,CAAJ,GAAQ,CCLC,AFCAsH,GDDGpC,CGACwD,APsBAxI,CSlBF2I,GJHP,GEDgB,AFCA,CEDC,AHArB,CGAI,AFCA,CDDmB1D,AJsBf,COtBgBuD,AJgBA3F,AHMA,IAAIhD,IOtBI,AHAhC,CGAI,AJgB6BoC,AHMT,CItBUiD,AJsBA9E,COtBCoI,OPsBX,COtBmB,CAAvC,AJgBoB,AChBxB,AJsB4CzI,CGNCmC,AHMrB,COtBsB,AHAA,AJsBtC,EAAwCxB,CGNxB,IAA6BwC,MHM7C,KGTyC;AWlBrD,ARWQ,ALgBJxB,AW3BJ,ALMY,AJgBIwB,AChBR,AFaJ,AGZC,ALqBI,AU3BT,QRkBQnD,CDQC4B,ACRL,AFOW,GCCX,ACRQ,CEbCqD,CHqBC,CKhBC,ANiBA,EOtBE,CCCF0D,EFIKvC,CCLCsC,CHAb,GAAiBzD,CEKV,CAAYlF,CAAnB,ACLoB,CAAC,CAAjB,EAAoB2I,EHAxB,MGAgC,CAA5B,EAA+BA,QAAQ,CAAvC,EAA0C;ADMjD,ALgBG9G,AMrBQkG,AJWqC,ACX7C,AFaA,AFSItH,YCDAqB,CEVO,ACXNqD,CDWD,CDEG,KAAK3D,AFSAd,ECDZ,AMrBciE,AHAd,CHqBe,ACRR,CAAS1E,CEbCkF,AFajB,AFSI,COtBI,APsBU,COrBN,CNoBQnF,CAAL,EMpBCiC,CNoBQ,EGrBxB,GHqB6BX,KAAL,GAAa,AMpBzB,CNoBZ,AMpBqB,ENoBmB,GMpBdtB,CAAL,CNoBwBC,CAAL,CMpBVyI,ENoBmB,KAAKnH,CMpBhB,KNoBW,AMpBND,GNoBoB,CAA/D,CMpBsC,CNoB4B,EMpBf,CAAb,ENoBiCA,CMpBhB+E,CPqBnD,GCDJ,EAA8E,CMpBhB/E,INoBqBC,CMpB5B,GAAe,CAAxC,CNoB9B,AMpBY,EAA8D,KAAKtB,CAAL,GAAS0I,QAAQ,KAAKpH,MAAL,GAAc,CAAd,GAAkB8E,OAAO9E,MAAP,GAAgB,CAA1C,CAAvE,CADJ;AMPhB,APaI,ALgBC,AMnBQ,AJcJ,AChBD,AFaH,AGZDgG,ALqBK,QMjBDtH,CAAJ,GAAQ,CFLCmF,MCCMzD,GAAf,CDDI,CCCgB,EDDEyD,UAAlB;AEMA,ACHC,AJcD,ADxBG,AGSH,ALqBH,eMjBU,AHWA7C,AEfA,KCIK8D,CDJC1E,IAAIL,CCIV,CAAYrB,CAAnB,AHWA,EEfO,GAAkB,GAAlB,GAAwB0B,IAAIJ,MAAnC;ACKH,ALgBD,AW7BJ,ALUQ,AJcH,AChBG,ACCH,AMTL,ADCA,KPWW,CQZL+I,CRwBC,CFKCtK,CAAJ,AEjBO,CAAP,EFiBQ,CGrBCqF,AORb,CAAc,CJUC0C,KAAP,MHFA,GAAqB,EAArB;AEMJ,ALgBI,AMnBH,AJcJ,AChBO,AJsBJlH,AW9BApB,QLaI6B,KAAJ,AFLSgE,AJsBAnF,ECDE,CKhBC,AKbAL,ETqBDmC,AFSX,CItBI,AORJ,CV6BgBT,ADCA,CW9BCxB,CPQC,AORlB,CV6BW,CAASA,AU7BAC,CV6BhB,AU7BJ,EPQI,AORmB;AGD3B,AReQ,ALgBH,AM/ByB,AHUzB,ACCDuH,ALqBI,AW9BA,MGFF2D,MdgCMtK,CW9BC0J,EGFEe,AReA,CDJC3J,GAAZ,CCIgB0E,CDJC,ELqBElG,CchCCoL,EReT,AKbP,CLamBjK,EKbE,GLarB,ANiBwB,CAAC,AW9BAsH,KGFlB,AdgCuB5I,CchCC,AdgCN,GAASG,KAAV,EAAiB,GchClC,CAAf,CdgCsDF,CAAL,CW9BpB,CAAkBD,CX8BWG,AW9B7B,EAAqBF,CAArB,CAArB,CX8BwB,CAAxB;Ac/BR,AReK,ALgBD,AELJ,AEfQ,AMTA,MGFF4B,Eb+BE7B,CAAJ,AELKsD,CFKCvB,Ea/BEoJ,CHECrL,CV6BT,AIpBU2H,EJoBE,AU7BR,GGFW+D,AHEA1L,CRwBnB,AEfoB,CFeCgD,CQxBb,GNSiByE,GFezB,CW1BY,CAAkB,AX0BAxE,IW1BlB,CAAZ,GX0BA,CEfoB,CFeoBC,AEfArB,GAApB,CAAZ,CFeR,EAA+CsB,gBAA/C,EAAiE;AWzBjEpB,ADFA,APiBI,ALgBI,AWhCR,AT2BI,AChBA0D,AJsBI,AW9BA,IGFJkG,EDFEP,EPiBE3J,EHWEgC,EU5BV,AbkCY,CalCC,AZiCA/B,AU7BAgJ,CLaT,ELgBI,CKhBS,ALgBAxK,CAAT,AMnBOyI,CPoBItI,ECDE4B,CGrBCyD,AORd,EX8BI,CchCZ,Ab+BQ,AELiB,AQxBA,CRwBChC,CChBtB,AORI,CGFoB,CVUCiC,AJsBA,CGNJ,EAAOhC,CW1BhC,CVUI,EAAgC,CJsB5B,EAA+B,CGNd,KAAoBD,KAAKJ,WAAL,IAAoB,CAApB,IAAyBI,KAAKJ,WAAL,IAAoBK,SAASd,UAA/F;AU3BAlD,APiBI,ALgBH,AGrBG,ACCA,ALqBI,YKrBA,EDDEiG,ACCA+B,CCIC,COjBC0D,CbkCCjL,GMjBGmG,CDJC,CQbjB,EAAoBxE,CTYC,CEKV,AFLW2D,ACCA8B,CQbtB,APiBuB/F,ANiBf,CAAgBpB,CalCC,GTYGF,CEKxB,AFLkB,AJsBd,CKrBA,CAAJ,ALqB2BY,CItBC4E,CCCC,KDDKxF,CAAjB,AJsBb,KItBoCuF,MAAMxF,CAAN,GAAUyF,MAAMzF,CAAvC,CAAjB;AUTR,ADFQ,APiBH,AHWD,AEfQ,ALqBH,AW9BD,ADJR,IIEI0L,EJFEzC,EIEN,AX0BQvF,CHIA,IahCKyH,AFIArL,CDJC,CVkCC,CW9BP,CNSS4H,AMTA+C,CDJCrL,CGAV,GAAc+L,CV4BC,AO5BT,EP4BV,AO5BJ,ELaY,CQbJ,ARaoBxJ,GAAhB,EMTJ,CAA0B,KAAK4I,aAA/B;AGDR,ADFQ,APJK,ALqCT,AELA,AChBI,ACCC,ALqBG9J,AUlCZwI,MIEM0C,AJFAtM,ETiCEY,AELAsC,CFKJ,ASjCJ,GTiCY,ASjCA2G,CGACrH,CTYC8D,ESZN,GAAW9D,ATYA6D,CJsBChF,CchCC,CDFb,EV4BgB,CW1BClB,AdgCb,CGNR,AHMsB,CUlC1B,GNY8B,CAAX,GAAe,CAAC,CAAhB,GAAoB,CAA/B,OUVa,EAArB,qCdgCY;ACAJ,AELJ,AChBI,AJsBC,AW9BD,QRwBAmE,KQxBK,CPQCiC,CHqBC,EU7BEe,EPQEjB,CHqBClE,CU7BC,CRwBC,AQxBd,CV6BO,CAASvB,AU7BA0G,CV6BhB,CELJ,EQxBwB,CAApB,CPQsB,CAAX,AORYA,GPQG,AOR1B,CPQW,CORiB,EPQE,CAAC,CAA/B;AUTR,ADFQ,AZiCH,AIpBG,ALqBH,AW9BO,ADJZ,MAAMwC,GIEGyC,GAAT,CDFa9L,CHAb,CIEe,ATWA,CQbP,AFIQ4K,ELaDlC,COjBI,CRaClB,GQbGsD,AHAApC,KLaR,CAAcf,CMTC,ENSf,CAAP,CMT0B0B,EEJf,CAAQ,EHA3B,CAA8B,CGACpJ,WFID,CAAa,GEJhB,CAAUoL,CFIWrL,GAAlB,EAAuBmB,CEJTK,IFIc2I,CEJ/B,EAAwBkB,GFIE,IEJK5J,CFIW,GAAvC,EEJH,AFI+CN,CEJvD,CAAX,GFIuEgJ,MAAL,KAAgB,GAA5D,CAAlB;AGDRyB,ADFC,AZiCD,AWpCJ,AT+BI,AChBI,ACCH,AMTO,ADJRjM,MEHEmL,EXoCE3K,AELA,CW1BCqF,Ab+BL,AWpCJ,AT+BSrC,CFKCjB,AWpCA,IXoCN,AGrBU6D,CUVV,Cb+BY,ASjCA/F,CCIC0K,EDJb,EAAiBxK,CAAjB,EAAoBC,CNYC,AMZrB,CP4BsB6C,AQxBd,CAAe6B,ADJA,ENYE5E,EORjB,CAAoB2K,CRwBvB,EAA0B3H,QAA1B,AQxBG,CRwBR,AChBqB,CAAUyC,CDgBW,KChBLxF,CAAN,GAAW2F,KAAK,KAAKR,SAAX,GAAwB,CAA5C,EAA+CK,MAAMvF,CAAN,GAAU,KAAKmF,UAAL,GAAkB,CAA3E,CAAjB;AUTJsG,Ab+BI,AWpCJjM,AT+BIkE,AChBA,AJsBJ7C,AW9BK,ADJD,SIECc,IAAL,Ab+BSJ,CGrBCsE,AMZAsD,ETiCN,AWpCQyB,AZqCArK,CCDCP,CAAT,GAAa+B,ADCjB,CGNkB,CHMC,CYrCnB,CXoCI,CWpCkB,CT+BlB,AO5BmBiH,CNYC,IAAIlJ,CMZCuB,KAAN,GAAc,CAAjC,KNYoB,CAAUkE,MAAMxF,CAAN,GAAW4F,KAAK,KAAKT,SAAX,GAAwB,CAA5C,EAA+CK,MAAMvF,CAAN,GAAU,KAAKmF,UAAL,GAAkB,CAA3E,CAApB;ASXJE,AZiCC,AWpCG,AT+BA/C,AEfJoF,ALqBI,AW9BH,ADJG,aGAK,ADHAkD,CFGC7K,CVkCCQ,AUlCP,EAASP,CLaC0B,AKbV,EAAYyH,CEHZ,APgBJ,ALqBiBpJ,CAAN,CKrBQ,COhBC6K,AT+BAhI,GHMG,GUlCnB,EEHA,AZqCwB7C,AUlCAoJ,CVkCjB,IAAsB5I,KGNKsC,AO5BlC,CVkCmC7C,CAAN,KGNb,AHMyB,EGNE8C,GHMG9C,CAA9C,IGNgB,EAAqC+C,KAArC,EAA4CC,gBAA5C,CAAhB;AWzBJ4I,ADFI,AZVK,AWOL,AT+BH,AChBG,ACCA,ALqBH,YKrBOjE,CQbC9H,ADHAgL,CReC/E,ESZN,CAAST,KRaK,CQbd,ADHA,GEKkBsG,AFLA,APgBA3G,GSXtB,CFL0BoC,EReE7G,SAASA,ECCnB,CAAY,GDDaP,CAAN,CCCFH,COhBb,CAAe,AReU4F,CCCjB,CAASR,EOhBjB,CAAlB,MPgBc,CDDyC1E,CCCTmB,IAAIL,CDDWtB,CAAN,GAAU6F,ACCnD,EAA2ClE,IAAIJ,GDDavB,CAA/B,ECC7B,CAAd,CDD+E6F,SAAS5F,CAAxF;AUTP,ADFI,ATYG,ACCA,AMTJqF,ADJI,YLaIuC,CMTC,ADJA/H,CNYCkG,EMZN,GAAWlG,GAAX,CLae,EAAf,ODDwBU,SAASA,MAAMP,CAAN,GAAUyF,YAAYlF,MAAMR,CAAN,GAAU8F,YAAY9F,CAAlC,IAAuC8F,YAAY7F,CAA9F;AQdA,AT+BJ,AHMAc,AW9BI,QRwBAyC,KS/BK0B,ADOA,ERwBE,EQxBEyF,CV6BFtJ,EDCK,EYrCZ,GAAiB,ADOjB,ECPA,EDOqB,KAAKmJ,SAA1B,EAAqCG,SAASrF,MAAT;AGD7C,ADFI1D,ADHI,AT+BAQ,AChBA,ACCA,ALqBA,AW9BH,ADJG,WGAG,CbkCC,CYrCC2I,APgBA,AKbA1B,CP4BCtG,AChBAkD,CUVC6F,ETWEhE,ALqBA9H,CAAL,EUlCJ,CEHA,CT8BO,AHOO,CUlCC,CEHC,CEKxB,AFLyB,EZqCEC,CchCC,AdgCpB,CYrCqBqK,CZqCC,CItBC,CCCvB,IAA4B,KAAKxK,CDDjC,ECC4B,CAASoF,COhBpB,CAAY,IAAZ,EAAkB,CPgBnC,EAAgD,EOhBR2F,QAAL,CAAc7K,CAAd,GAAkB,CAApC,EAAuC,KAAK6K,QAAL,CAAc5K,CAAd,GAAkB,CAAzD,CAAD,CAAhB;AEMJ,ADFI,ADHA,AT+BAmD,AEfI,ALqBA,AUlCAkG,UIEFqC,GDFG9J,ADHA,GCGL,CAASuJ,ADHAzE,CPgBCoB,ALqBA/G,GYrCG,AT+BA,CS/Bb,AT+Bc,AO5BA,CIECpB,AXwBR,CS7BS+G,ECGhB,ARakBmB,ALqBA7G,EYrCE,CEKlB,ADFmB,CDHrB,CEKJ,AdgC2BC,CYrCCyF,AFGD4C,GEHvB,AZqCkB,CalClB,AbkC4B,AUlCd,CEFV,CFEyB,GVkCIvJ,CYpCxByK,APeyBzC,ALqBN,GAAS,KKrBnB,ALqBwBhI,CKrBC2B,ALqBf,GKrBV,ALqB4B,CKrB1C,GOfA,CAAsB,AZoCyB1B,CAAL,GYpChBwI,AZoCyB,KAAKxI,CAA1C,CAAd,WYpCsB,CAAagB,KAAKgJ,MAAL,KAAgB,KAAKY,QAAL,CAAc7K,CAA3C,EAA8CiB,KAAKgJ,MAAL,KAAgB,KAAKY,QAAL,CAAc5K,CAA5E,EAA+E,EAA/E,EAAmF,EAAnF,CAAtB;AEKRyL,ADFI,ADFA,AT8BArI,AChBA,ACCI,ALqBA,AW9BRzB,ADJY,SCIPC,EGFE,CHEP,CEJSA,ADFAmJ,CRcC9E,AORA,CGFCgF,CDFP,CAASG,CRaC3H,CLqBC,CUlCC,EAAE,CP4BC,AHMA3D,CYpCf,AT8BgB,CU5BhB,CAAkB,CAAlB,ADFmB,CZoCR,CalCU,AbkCA,CalCrB,CCEG,AFJoBsB,ARcA,CUVT8J,ADFU,CRaCpD,CLqBC/H,AUlCAuJ,CNYClI,AJsBN,EalCQ8J,CCE1B,AdgC2BnK,CKrBCiH,AKbAe,CIETnH,GAAnB,ADFqB,AbkCb,AUlCC,CIEhB,ADFwCP,AHA5B,CLaiB,ALqBY,CKrBCkD,AKbA+E,CEFnB,CAAWtI,CCE9B,CbkC0ChB,CalCC,ATYpB,AJsBc,AUlCM+I,CNavCxD,ACAwC,COfTyE,APeU,CLqBCjJ,CUlCR,CGAUmK,AHAA3B,ENatCxJ,ACAwCF,COfpB,ARe1B,AJqBO,CAAP,CKrByC,CQbF,ATa7B,ACAwCoI,AKbhB,CGAiB3G,ATaxCkE,CQf+B,CFEW,EEFtC,ECEnB,ADFmDxE,ARe9BjB,CAAN,AMb+CF,GNarC0F,AMbgC,CEFDyE,AFEUX,ELarB,CAAwB,EDAtCtJ,CQfoB,ARerC,CCA2DqB,CKbhB,CAAkB,CNavC,CQf+B,ARc5C,EAEnBmE,CQhBe,AFE6Da,EEFR,EAArD,CRgBTpG,CQhBkE,ARgBxE,AMdqD,EEFtC,AFEqEsJ,CEFxF,ARgBc,ACDuD,CDCtD9D,ACDiEjB,GAAGhD,AKbUwH,GNcxE/I,ACDgD,CDCtD,AMdyE,CLaA0B,AKbU0E,ENczEb,ECDmElE,EKbJ,CAAiBE,CNc1EvB,CAAjB,ACDuD,CKbZ,CLa0C0B,AKb7D,ENcF,CAFb,CCCgFJ,CDEnGN,KAAKkF,ACF4D,CAAxB,CAApB,CDErB,ACFA,CDESX,MAAMxF,CAAN,GAAUyF,MAAMzF,CAAhB,GAAoB,KAAKmF,SAAlC,EAA6CM,MAAMzF,CAAN,GAAUwF,MAAMxF,CAAhB,GAAoB,KAAKmF,SAAtE,IAAmFc,cAHhE,EAInBhF,KAAKkF,GAAL,CAASX,MAAMvF,CAAN,GAAUwF,MAAMxF,CAAhB,GAAoB,KAAKmF,UAAlC,EAA8CK,MAAMxF,CAAN,GAAUuF,MAAMvF,CAAhB,GAAoB,KAAKmF,UAAvE,IAAqFa,cAJlE,CAAvB;AUTJ2F,ADFI,AVwBO,AEXH,ALqBH,AW9BD,ADJQ,KPwBZ,IHOI,Ia/BK/J,AFIA,EX8BE,CalCP,CAASuJ,ARaA,AMTAT,GDJGpB,CLaCnH,IAAT,AMTJ,ADJiB4G,CGAjB,GAAqB,ARaAtF,AMTA,ADJT,CAAU8F,ICIIgB,EEJ1B,AHAY,CAAiB3G,ILazB,EAA+BgE,AMTnC,ADJY,ECIyB8C,EDJE,KLaKhG,AKbAnD,ECIEI,CDJP,CLaJ,AKbad,CLaCsB,CMTZ,CAAcP,ENShB,CMTE,KDJE,CAAqB0H,KAAKP,IAAL,CAAUQ,MAAV,CAAiB,CAAjB,CAArB,CAA/B,EAA0ED,KAAKP,IAAL,CAAUQ,MAAV,CAAiBzF,KAAjB;AIGzF,ADFO,ADFA,ARmBA,ACJC,ALqBG,AW9BP,ADJW,aGAHlC,ADFAiJ,ARmBA,GSjBL,CAAS9D,ATiBAZ,EJiBE,CUlCC,CAACmD,EEFb,AZoCexJ,CYpCC2H,CRmBhB,CMjBkBsB,EGAlB,AbkCW,CIjBU,CJiBjB,AUlCS,CGAU,AHAAQ,GEFvB,ARmB0BtE,CQnBC,EFEd,CGAb,AHA8BrB,EEFEmH,GRmBhC,CMjBQ,CNiB6B,CMjBC,KEFtC,EFE6C,IAAP;AEDzC,AT8BD,ACXQ,AJiBH,AWnDK,ADiBE,QP4BRpH,QCXQsC,KMjBKgB,EP4BE,IO5BP,CP4BZ,AO5BwBqC,GNiBG9H,EMjBEuH,IAAL,CAAUQ,MAAV,CAAiB,CNiB7B,AMjBY,CNiBmBpD,AMjB/B,SNiBwCC,MAAxC,CAAJ,EAAqD;AUdjEyF,ADFQ,AV4BJ,ACXY,ACJR,ALqBH,AUlCQ,QP4BLrI,KU5BK3D,ARaA,GQbL,AV4BJ,CU5Ba8B,ARaAQ,IQbT,ARaA,CQbc,ATiBAkE,GCJGuB,EQbEhG,GAAnB,CTiBuB,ECJvB,EDI2B9B,ACJA6H,QAAQpB,ODIZ,ACJI,CDIMJ,ACJUhE,IAAhB,KDIepC,CAAT,GAAc2F,KAAKS,SAAS9E,KAAf,GAAwB,CAA/C,EAAkD8E,SAASnG,CAAT,GAAamG,SAAS7E,MAAT,GAAkB,CAAjF,CAAf;AShBX,ADFDkJ,ARmBY,AMxBO,SAAf,SCWOH,GCNMlE,CRmBCG,OQnBlB,EAA2B,GRmBG,IAAIxG,eAAJ,CAAUqG,SAASpG,CAAT,GAAc4F,KAAKQ,SAAS9E,KAAf,GAAwB,CAA/C,EAAkD8E,SAASnG,CAAT,GAAamG,SAAS7E,MAAT,GAAkB,CAAjF,CAAlB;ASpCH,ADkBL,AT8BJ,AEfI,ALqBJJ,AUlCI,WP4BGoB,ES9BE2C,AFEAuE,ELaE7B,GLqBGpH,IYpCV,APeA,AKbA,CEFemE,AZoCnB,EGNqBd,AHMA,AUlCA,EEFjB,AFEA,CEFoBuC,GT8BxB,EAA6B,GS9BzB;AACA,AT8BA,ACXQ,ACJX,ALqBG,AUlCA,YP4BIxC,AHMApD,CYpCCsK,AFEApB,KAAL,ENiBY3D,CMjBC,CAAb,CEFA,CAAgBoC,KZoCKpI,CGNC,CAAtB,EAAyB,CHMzB,EIjB4BwG,AJiBA,EYpC5B,CT8B+B,IAAIzC,AHMA,EIjBvB,EJiB2B/D,CGNR,CAAU,CCXCiG,EJiBP,CAAUxF,MAAMR,CAAN,GAAU,GIjBGsG,EJiBEtG,CGN7B,AHMI,CGNV,CHMsCQ,CIjBrB,CAAlC,EAA2D,EJiBEP,CAAN,GAAU,CIjBC,IJiBIA,CIjBX,AJiBhC,CAAP;AYnC/B,ARmBQ,AJiBR,AUlCA,kBGAUiL;AV6BPzH,ACXC,ACJL0E,mBFee5F,EEfE,YFeYwB,KAAd,EAAX;AS7BJmE,AT8BI,AEfA,ALqBJ9G,AUlCA8F,WAAO1G,ELaE,CFeCwD,EO5BV,CLaa4D,CKbC,CEFCjG,AZoCA,GYpCf,EAAoB,APehB,GFemBsB,CEfCmF,OAAOC,MAAP,CAAc,EFeEtF,GEfGuE,KFepB,EAA2BtE,CEf1B,CAApB,EAAkD4E,EFeEnE,MEfM6B,GFeGnC,GEfX,EFeJ,CEfqB,CFeCf,GEflB,CFe/B,CAAnB;AS7BA,ARmBA,ACJH,ALqBG,AUlCA,YEFIT,EFEEgI,CNiBC,AJiBA1I,CYpCCjB,CAAJ,ERmBJ,CQnBY,AZoCAkB,CYpCR,AFES,GVkCN,CYpCUS,AZoCA,CUlCCH,GEFGvB,AFER,CEFI,AZoCKD,AUlCAmB,CVkCL,EYpCQ,CAArB,AZoCsB,IYpCIQ,CZoCC3B,CAAd,EYpCiBA,CAAJ,AZoCK,AUlCtB,CAAuBQ,EEFEmB,EZoCE1B,CAAL,AUlCtB,CEF6BqB,AFE1C,EVkC4C,GYpCd,EZoCmBrB,CYpCC,AZoC3C,CAAP,IYpCuD4K,QAAL,CAAc7K,CAA5D,IAAiE2B,IAAI1B,CAAJ,GAAQ0B,IAAIJ,MAAZ,GAAqB,KAAKsJ,QAAL,CAAc5K,CAAxG,EAA2G,OAAO,IAAP;AT+B3G,ACXH,AJiBA,AUlCG,YP4BIsD,EO5BEqG,OAAOD,IP4BInG,CO5BCzC,GP4Bd,EAAmB0C,QAAnB,AO5BS,CP4Bb,CO5BA,CP4BkC;AS7BlC,APeJqD,AL3CQ,aY4BC,IAAIV,IPeIzE,GAAjB,COfI,CPekB2G,GOfG,KAAKpD,QPe9B,COfI,CPeoC,COfC;AACjC,AT8BJ,ACXJsB,ACJI,AKbA,YNiBIC,CDWC,CEfC3D,AKbA+G,EEFElI,CT8BCsC,ECXb,CQnBgBxC,CT8BZ,ACXa,GCJG,CFeCuB,GEfGf,EKbE0H,CP4BClG,IS9Bf,AFEmBrC,CEFCgF,IT8BIjD,EEfhB,CAASxB,EOfY0E,AT8BpB,EAAsBnC,AEfV1C,AKbP,EAAtB,CLagB,COfR,APeR,COfI,AT8BJ,ES9B8C,AT8BA,OS9BO,IAAP;AAC7C,AT8BG,ACXJ,ACJA,AKbA,YNiBIiF,AMjBAoD,ELaE9G,ILqBChD,OKrBU,GKbG,CLaCkC,EDIEA,EMjBEyH,KAAzB,EAAgC,GLaf,CAASpB,CDI1B,EAA6B,aCJZ,CAAjB;AOdH,AT8BO,ACXA,ACJJ,AKbIsB,YLaAhC,IFeIlE,CO5BC7C,CNiBC6F,ICJI,GKbV,CAAcmD,CLaCrC,EFeErD,GCXG,CDWhB,CAAkB/B,ACXAA,ICJZ,CAAiBT,AKb3B,CNiB4B8E,EDWErE,AEfpB,CAAd,IFeuCe,ACXf,EAAiBe,GDWP,ICXc,CDWCD,CCXzB,EAApB,CDWI,CAAJ,EAAoD;AO3BvD,SAFD,MAEO;AEDXqF,AT8BQ,ACXA,ACJJ,AKbIM,aEFCjI,EPeEiG,COfX,CRmBa,AMjBA/G,CEFCyH,GRmBG3B,CAAT,CCJWG,EKbX,CNiBc,AMjBA,KNiBKzB,AMjBAqE,GEF3B,EAAgC,AFExB,GLaG,CAAyB5G,IDI5B,EAAkC,CCJ/B,EAAkCC,QAAlC,CAAP;AOdA,AT8BI,ACXI,ACJX,AKbI,eEFM,GT8BGqB,ES9BE0G,ERmBElE,QQnBP,CAAgBE,GRmBGD,IDWI9D,GCXG4D,CAAP,CAAlB,IQnBD,AT8BgCxE,CS9BCR,GAAjC,EAAsC2G,KT8Bf,CAAqBtF,MAAMiB,IS9BlD,AT8B4C,CS9BnD,CT8B+D7B,IAAjC,CAA1B;AS7BP,AT8BO,ACXI,kBDWEgB,ICXIK,UDWUT,CCXC,KDWKS,ACXA4B,SDWSlC,ICXd,CDWD,ACXoByD,EDWExE,IAAtB,CAA2BD,ECX1B,EAA8BC,IAA/C,GDWgB,CAAuCY,MAAMiB,IAAN,EAAY7B,IAAnD,IAA2DqB,SAASL,WAAxF;AACA,AEfRsE,AKbI,aAAKlG,ELaEG,CKbP,CAAStB,CP4BCsC,AEfd,EAAgB,AKbZ,CAAaiH,IAAb,MP4BuBxF,oBAAoBhB,WAAvC;AS7BRkC,ARmBY,ACJR,AKbH,YLaO,COfC,CPeC3D,MDIM,KAAK4D,ICJIlE,aDIT,CAAuBoF,ECJ/B,CAAJ,EAA8B,EDIlB,EAAgChD,GCJP,KDIzB,ACJkB,CDItB,EAA+C;AQlBvD,AT8BI,ACXQiD,aQnBP,IAAIuE,OAAT,IAAoB,IRmBI/G,CQnBC6G,IRmBb,CAAkBpG,GQnB9B,CRmBY,CQnBuBsG,ARmBArE,QQnBQtB,CRmB/B,KQnBuB;AACtC,AT8BO,ACXQ,ACJZ,AKbJwE,YAAQP,ELaE9B,EFeEzD,AO5BZ,EAAc,ELaE,KDIKqB,ACJAkC,CFeb,EAAgB,UCXR,CAAmBX,ACJnB,CAAoBjF,GAApB,CAAZ,IDIY,EAA8BuC,KAA9B,CAAoCS,IAApC,CAAyC,KAAKU,aAAL,CAAmBxB,MAA5D;ADYJ,ACXC,ACJT,AKbA,YLaI,AKbA,ELaE4D,AKbA8B,OLaO,CFeClF,IEfIiD,GFeGvE,CO5BC8F,ILalB,CAAJ,EAA6B,CFeC1G,MO5B1B,CAAJ,EAA6B,EP4BR,CAAqBa,MAAMS,SAASN,KAAf,EAAsBf,IAA3C,CAAb;AS7BZR,AT8BY,ACXH,ACJD,SOfHC,GAAL,EAAU,EPeE+F,IFeIpE,KAAKJ,CEfC,KAAKuE,KFeX,GAAmB,CAAnB,IAAwBtD,AEflB,CAAmB1C,GAAnB,CAAd,EFeuC6B,KAAKJ,WAAxC,EAAqD;AS7B7D,AT8BYI,ACXR,ACJA,AKbJ,aEFKsH,AFEArB,INiBIpE,ACJAiC,KKbT,CEFA,AFEe3C,CEFC4D,CT8BCnF,AEfb,CAAcqE,CKblB,CAAoB8B,CLahB,CDIA,CAAmB5E,CMjBvB,CLayBiD,EOfzB,ARmBI,CQnBwB,AT8BhB,ACXgBlB,GDWGrC,CEf3B,COf6B2G,ET8BrB,ICXR,KQnBJ,EAA8CnJ,GAA9C;AACA,AT8BY2B,ACXX,ACJA,AKbJ,aEFQ,IAAI4C,QAAT,AT8BiB/C,IS9BI,KAAK6B,IT8Bd,GAAqBzB,ES9BjC,EAAqC2C,KT8BKjD,IS9BIkD,CT8BlC,KS9ByB,CAAgBzE,IAAhB,CAAqBC,GAArB;AACrC,AT8BS,ACXZ,aQnBQ,IAAIoJ,OAAT,IAAoB,KAAKF,QAAzB,EAAmCE,QAAQrJ,IAAR,CAAaC,GAAb;AACnCA,AT8BK,AEfL,AKbJyD,YEFQ0B,CFEC,ELaE,IAAP,IOfA,GAAkB,OAAlB;AACH,ARmBDF,ACJC,AKbG,YAAI,KAAK2C,INiBI3G,KMjBT,CAAee,CNiBvB,EAA0Bd,GMjBlB,GAAwB,CAA5B,CNiBJ,CMjBmC,CNiBC;AQ3D9B,ATuEE,ACXJ,AMjBI,eNiBG,GMjBGgH,OAAO,KAAKV,OAAL,CAAa,INiBXvG,CMjBgB2G,MNiB5B,EAAqB1G,CMjBE,CAAe,CAAf,EAAkBgG,GNiBzC,EAA+B,CMjBrB,EAAuCiB,ENiBb3E,EMjB1B,CAA4C,IAA5C,EAAkD,INiB5D,CMjBiEoE,CNiBd,KAAKlE,GMjBI,CAAe,CAAf,CAAlD,CAAb,UNiBsD,CAAuBwB,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","file":"Village-Simulator.4d1af42a.map","sourceRoot":"..","sourcesContent":["import villagerStill from '../../assets/images/villager/still.png'\r\n\r\nconst initializeImage = imgPath =>\r\n    new Promise((resolve, reject) => {\r\n        const img = new Image()\r\n        img.src = imgPath\r\n        img.onload = resolve\r\n        img.onerror = reject\r\n    })\r\n\r\nclass AssetManager {\r\n    constructor() {\r\n        this.imagesToLoad = [villagerStill]\r\n    }\r\n\r\n    onLoad() {\r\n        return Promise.all(this.imagesToLoad.map(initializeImage))\r\n    }\r\n}\r\n\r\nexport default AssetManager\r\n","class Point {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    _operation(value, transform) {\r\n        [this.x, this.y] = transform(value)\r\n    }\r\n\r\n    add(pointOrX, y = null) {\r\n        let addition = point => [this.x + point.x, this.y + point.y]\r\n\r\n        if (pointOrX instanceof Point) {\r\n            this._operation(pointOrX, addition)\r\n        } else if (typeof pointOrX === 'number' && typeof y === 'number') {\r\n            this._operation(new Point(pointOrX, y), addition)\r\n        } else {\r\n            console.error('Error Point.add didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    sub(pointOrX, y = null) {\r\n        let subtraction = point => [this.x - point.x, this.y - point.y]\r\n\r\n        if (pointOrX instanceof Point) {\r\n            this._operation(pointOrX, subtraction)\r\n        } else if (typeof pointOrX === 'number' && typeof y === 'number') {\r\n            this._operation(new Point(pointOrX, y), subtraction)\r\n        } else {\r\n            console.error('Error Point.add didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    multiply(value) {\r\n        let multiply = value => [this.x * value, this.y * value]\r\n\r\n        if (typeof value === 'number') {\r\n            this._operation(value, multiply)\r\n        } else {\r\n            console.error('Error Point.multiply didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    checkEquals(point) {\r\n        return point.x === this.x && point.y === this.y\r\n    }\r\n\r\n    getNormalised() {\r\n        if (this.x || this.y) {\r\n            const total = Math.sqrt(this.x * this.x + this.y * this.y)\r\n            return new Point(this.x / total, this.y / total)\r\n        } else {\r\n            return new Point()\r\n        }\r\n    }\r\n\r\n    getDifference(point) {\r\n        if (point instanceof Point) return new Point(point.x - this.x, point.y - this.y)\r\n    }\r\n\r\n    getMagnitude() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y)\r\n    }\r\n}\r\n\r\nexport default Point\r\n","import Point from './Point'\r\n\r\nclass Hitbox {\r\n    constructor(pointOrX, y, width, height = null) {\r\n        if (pointOrX instanceof Point) {\r\n            this.pos = new Point(pointOrX.x, pointOrX.y)\r\n            this.width = y\r\n            this.height = width\r\n        } else {\r\n            this.pos = new Point(pointOrX, y)\r\n            this.width = width\r\n            this.height = height\r\n        }\r\n    }\r\n\r\n    detectCollision(boxOrPoint) {\r\n        let box = boxOrPoint\r\n        if (boxOrPoint instanceof Point) box = new Hitbox(boxOrPoint, 0, 0)\r\n\r\n        return (\r\n            box instanceof Hitbox &&\r\n            this.x - this.width / 2 < box.x + box.width / 2 &&\r\n            box.x - box.width / 2 < this.x + this.width / 2 &&\r\n            this.y - this.height / 2 < box.y + box.height / 2 &&\r\n            box.y - box.height / 2 < this.y + this.height / 2\r\n        )\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.strokeRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height)\r\n    }\r\n\r\n    get x() {\r\n        return this.pos.x\r\n    }\r\n    set x(newX) {\r\n        this.pos.x = newX\r\n    }\r\n\r\n    get y() {\r\n        return this.pos.y\r\n    }\r\n    set y(newY) {\r\n        this.pos.y = newY\r\n    }\r\n}\r\n\r\nexport default Hitbox\r\n","import Point from '../Point'\r\n\r\nclass Node {\r\n    constructor(pointOrX, y, distanceMultiplier = 1) {\r\n        if (pointOrX instanceof Point) {\r\n            this.pos = new Point(pointOrX.x, pointOrX.y)\r\n            this.distanceMultiplier = y || 1\r\n        } else {\r\n            this.pos = new Point(pointOrX, y)\r\n            this.distanceMultiplier = distanceMultiplier\r\n        }\r\n    }\r\n\r\n    getDistance(node) {\r\n        return this.distanceMultiplier * Math.sqrt(Math.pow(this.x - node.x, 2) + Math.pow(this.y - node.y, 2))\r\n    }\r\n\r\n    get x() {\r\n        return this.pos.x\r\n    }\r\n    get y() {\r\n        return this.pos.y\r\n    }\r\n}\r\n\r\nexport default Node\r\n","function addToPriorityQueue(priorityQueue, item) {\r\n    let queueIndex = 0\r\n\r\n    for (let instance of priorityQueue) {\r\n        if (instance.totalValue < item.totalValue) {\r\n            queueIndex++\r\n        } else {\r\n            break\r\n        }\r\n    }\r\n\r\n    return [...priorityQueue.slice(0, queueIndex), item, ...priorityQueue.slice(queueIndex)]\r\n}\r\n\r\nfunction initPriorityQueue(srcNode, destNode, aList, checkLineOfSight) {\r\n    return aList.reduce((priorityQueue, { node }, index) => {\r\n        if (checkLineOfSight(srcNode, node)) {\r\n            const totalWeight = srcNode.getDistance(node)\r\n\r\n            return addToPriorityQueue(priorityQueue, {\r\n                index,\r\n                prevNodeIndex: -1,\r\n                totalValue: destNode.getDistance(node) + totalWeight,\r\n                totalWeight\r\n            })\r\n        }\r\n        return priorityQueue\r\n    }, [])\r\n}\r\n\r\nfunction aStarFinder(srcNode, destNode, aList, checkLineOfSight) {\r\n    const checkSuccess = (dest, currNode) => dest.totalWeight >= 0 && dest.totalWeight <= currNode.totalValue\r\n\r\n    let checkedNodes = []\r\n    let priorityQueue = []\r\n    let lineOfSight = true\r\n\r\n    if (!checkLineOfSight(srcNode, destNode)) {\r\n        lineOfSight = false\r\n        priorityQueue = initPriorityQueue(srcNode, destNode, aList, checkLineOfSight)\r\n    }\r\n\r\n    let dest = {\r\n        node: destNode,\r\n        totalWeight: -1,\r\n        prevNodeIndex: -1\r\n    }\r\n\r\n    let breakCounter = 10000\r\n    let currNode\r\n\r\n    while (priorityQueue.length) {\r\n        if (breakCounter-- <= 0) throw new Error('Reactor overloaded')\r\n\r\n        currNode = priorityQueue.shift()\r\n        const canSeeDest = checkLineOfSight(destNode, aList[currNode.index].node)\r\n\r\n        if (checkSuccess(dest, currNode)) break\r\n\r\n        for (let edge of aList[currNode.index].edges) {\r\n            // checks if the edge isn't already in checkedNodes\r\n            if (checkedNodes.some(node => node.index === edge)) continue\r\n\r\n            // A* calculations\r\n            const hierarchicalValue = destNode.getDistance(aList[edge].node)\r\n            const totalWeight = aList[currNode.index].node.getDistance(aList[edge].node) + currNode.totalWeight\r\n            const totalValue = hierarchicalValue + totalWeight\r\n\r\n            // Updating the dest special case since it's not part of aList\r\n            if (canSeeDest) {\r\n                const dist = destNode.getDistance(aList[currNode.index].node)\r\n                if (dest.totalWeight < 0 || dist < dest.totalWeight) {\r\n                    dest.totalWeight = dist\r\n                    dest.prevNodeIndex = currNode.index\r\n                }\r\n            }\r\n\r\n            // Checking if the edge is already in the priorityQueue and removing and re-adding it to the priority queue if its totalValue is less than the calculated totalValue\r\n            const priorityEdgeIndex = priorityQueue.findIndex(el => el.index === edge)\r\n\r\n            if (priorityEdgeIndex > -1) {\r\n                const priorityEdge = priorityQueue[priorityEdgeIndex]\r\n\r\n                if (priorityEdge.totalValue <= totalValue) continue\r\n\r\n                priorityQueue.splice(priorityEdgeIndex, 1)\r\n            }\r\n\r\n            priorityQueue = addToPriorityQueue(priorityQueue, {\r\n                index: edge,\r\n                prevNodeIndex: currNode.index,\r\n                totalValue,\r\n                totalWeight\r\n            })\r\n        }\r\n\r\n        checkedNodes.push(currNode)\r\n    }\r\n\r\n    // Backtracking over the checkedNodes to figure out what was the fastest route\r\n    let fastestRoute = [destNode.pos]\r\n    let lastIndex = dest.prevNodeIndex\r\n\r\n    while (lastIndex >= 0) {\r\n        fastestRoute.unshift(aList[lastIndex].node.pos)\r\n        lastIndex = checkedNodes.find(el => el.index === lastIndex).prevNodeIndex\r\n    }\r\n    fastestRoute.unshift(srcNode.pos)\r\n\r\n    // Hasn't found a valid path for pathfinding\r\n    if (!lineOfSight && fastestRoute.length === 2) console.log('Could not find a valid route when pathfinding')\r\n\r\n    return fastestRoute\r\n}\r\n\r\nexport default aStarFinder\r\n","import Hitbox from '../Hitbox'\r\nimport Point from '../Point'\r\nimport Node from './Node'\r\nimport aStarFinder from './AStarFinder'\r\n\r\nclass Network {\r\n    constructor(obstacles, nodeWidth, nodeHeight) {\r\n        this.obstacles = obstacles\r\n        this.nodeWidth = nodeWidth\r\n        this.nodeHeight = nodeHeight\r\n\r\n        this.adjacencyList = []\r\n        this.update = false\r\n    }\r\n\r\n    _checkLineOfSight(node1, node2) {\r\n        const gradient = (node1.y - node2.y) / (node1.x - node2.x)\r\n\r\n        const xt = gradient < 0 ? -1 : 1\r\n        const xb = gradient < 0 ? 1 : -1\r\n\r\n        const node1Top = new Point(node1.x + (xt * this.nodeWidth) / 2, node1.y - this.nodeHeight / 2)\r\n        const node1Bottom = new Point(node1.x + (xb * this.nodeWidth) / 2, node1.y + this.nodeHeight / 2)\r\n\r\n        const checkLowerBound = point => point.y > gradient * (point.x - node1Top.x) + node1Top.y\r\n        const checkUpperBound = point => point.y < gradient * (point.x - node1Bottom.x) + node1Bottom.y\r\n\r\n        const roundingOffset = 0.000000001\r\n\r\n        const surroundingBox = new Hitbox(\r\n            node1.x + (node2.x - node1.x) / 2,\r\n            node1.y + (node2.y - node1.y) / 2,\r\n            Math.max(node1.x - node2.x + this.nodeWidth, node2.x - node1.x + this.nodeWidth) - roundingOffset,\r\n            Math.max(node1.y - node2.y + this.nodeHeight, node2.y - node1.y + this.nodeHeight) - roundingOffset\r\n        )\r\n\r\n        for (let obstacle of this.obstacles) {\r\n            if (surroundingBox.detectCollision(obstacle.hitbox)) {\r\n                const obsTop = new Point(obstacle.x + (xt * obstacle.width) / 2, obstacle.y - obstacle.height / 2)\r\n                const obsBottom = new Point(obstacle.x + (xb * obstacle.width) / 2, obstacle.y + obstacle.height / 2)\r\n\r\n                if (checkLowerBound(obsBottom) && checkUpperBound(obsTop)) return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    addNode(newNode) {\r\n        if (newNode instanceof Node) {\r\n            const newInstance = { node: newNode, edges: [] }\r\n\r\n            for (let i in this.adjacencyList) {\r\n                const currIndex = Number(i)\r\n                const currNode = this.adjacencyList[currIndex].node\r\n\r\n                if (this._checkLineOfSight(newNode, currNode)) {\r\n                    newInstance.edges.push(currIndex)\r\n                    this.adjacencyList[currIndex].edges.push(this.adjacencyList.length)\r\n                }\r\n            }\r\n            this.adjacencyList.push(newInstance)\r\n        }\r\n    }\r\n\r\n    getShortestRoute(srcNode, destNode) {\r\n        return aStarFinder(srcNode, destNode, this.adjacencyList, this._checkLineOfSight.bind(this))\r\n    }\r\n\r\n    draw(ctx) {\r\n        for (let { node, edges } of this.adjacencyList) {\r\n            ctx.strokeStyle = 'blue'\r\n            ctx.strokeRect(node.x - this.nodeWidth / 2, node.y - this.nodeHeight / 2, this.nodeWidth, this.nodeHeight)\r\n            for (let edge of edges) {\r\n                ctx.strokeStyle = 'lime'\r\n                ctx.beginPath()\r\n                ctx.moveTo(node.x, node.y)\r\n                ctx.lineTo(this.adjacencyList[edge].node.x, this.adjacencyList[edge].node.y)\r\n                ctx.stroke()\r\n            }\r\n        }\r\n        ctx.strokeStyle = 'black'\r\n    }\r\n}\r\n\r\nexport default Network\r\n","import Hitbox from '../Hitbox'\r\nimport Network from './Network'\r\nimport Node from './Node'\r\n\r\nclass Pathfinder {\r\n    constructor(map) {\r\n        this.map = map\r\n        this.networks = {}\r\n    }\r\n\r\n    _getNetworkKey(box) {\r\n        return 'w' + box.width + 'h' + box.height\r\n    }\r\n\r\n    _getNetwork(box) {\r\n        const key = this._getNetworkKey(box)\r\n\r\n        if (!(key in this.networks)) {\r\n            this.addNetwork(box)\r\n        }\r\n\r\n        return this.networks[key]\r\n    }\r\n\r\n    _buildNetwork(box) {\r\n        let network = new Network(this.map.obstacles, box.width, box.height)\r\n        let nodeList = []\r\n\r\n        for (let focusedObstacle of this.map.obstacles) {\r\n            const nodes = focusedObstacle.getNodes(box)\r\n            const checkedNodes = nodes.filter(el => !this.map.checkCollision(new Hitbox(el.pos, box.width, box.height)))\r\n            for (let node of checkedNodes) nodeList.push(node)\r\n        }\r\n\r\n        for (let node of nodeList) network.addNode(node)\r\n\r\n        return network\r\n    }\r\n\r\n    updateNetworks() {\r\n        for (let network of Object.values(this.networks)) network.update = true\r\n    }\r\n\r\n    getShortestRoute(box, destinationPoint) {\r\n        const srcNode = new Node(box.pos)\r\n        const destNode = new Node(destinationPoint)\r\n        let network = this._getNetwork(box)\r\n\r\n        return network.getShortestRoute(srcNode, destNode)\r\n    }\r\n\r\n    addNetwork(box) {\r\n        if (!(box instanceof Hitbox)) return false\r\n\r\n        const key = this._getNetworkKey(box)\r\n        if (!(key in this.networks)) {\r\n            let network = this._buildNetwork(box)\r\n            this.networks[key] = network\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    drawNetwork(box, ctx) {\r\n        let network = this._getNetwork(box)\r\n        network.draw(ctx)\r\n    }\r\n}\r\n\r\nexport default Pathfinder\r\n","import Hitbox from './Hitbox'\r\n\r\nclass Entity {\r\n    constructor(x, y, width, height) {\r\n        this.hitbox = new Hitbox(x, y, width, height)\r\n    }\r\n\r\n    get pos() {\r\n        return this.hitbox.pos\r\n    }\r\n\r\n    get x() {\r\n        return this.hitbox.x\r\n    }\r\n    get y() {\r\n        return this.hitbox.y\r\n    }\r\n    get width() {\r\n        return this.hitbox.width\r\n    }\r\n    get height() {\r\n        return this.hitbox.height\r\n    }\r\n}\r\n\r\nexport default Entity\r\n","import Entity from './Entity'\r\nimport Node from './Pathfinding/Node'\r\n\r\nclass Obstacle extends Entity {\r\n    getNodes(hitbox) {\r\n        let nodes = []\r\n        for (let xDir = -1; xDir <= 1; xDir += 2) {\r\n            for (let yDir = -1; yDir <= 1; yDir += 2) {\r\n                nodes.push(\r\n                    new Node(this.x + xDir * (this.width / 2 + hitbox.width / 2), this.y + yDir * (this.height / 2 + hitbox.height / 2))\r\n                )\r\n            }\r\n        }\r\n        return nodes\r\n    }\r\n}\r\n\r\nexport default Obstacle\r\n","import Obstacle from './Obstacle'\r\n\r\nclass VillageCentre extends Obstacle {\r\n    constructor(x, y) {\r\n        super(x, y, 40, 40)\r\n    }\r\n}\r\n\r\nexport default VillageCentre\r\n","class Task {\r\n    constructor(name, action, data = {}) {\r\n        this.name = name\r\n        this.action = action\r\n        this.data = data\r\n\r\n        return this\r\n    }\r\n}\r\n\r\nexport default Task\r\n","import Entity from './Entity'\r\nimport Hitbox from './Hitbox'\r\nimport Task from './Task'\r\n\r\nimport still_path from '../assets/images/villager/still.png'\r\nconst still = new Image()\r\nstill.src = still_path\r\n\r\nclass Villager extends Entity {\r\n    constructor(map, x, y) {\r\n        const sideLength = still.width * 2\r\n        super(x, y, sideLength, sideLength)\r\n\r\n        this.map = map\r\n\r\n        this.actions = {\r\n            pathfind: function(task) {\r\n                if (!('points' in task.data)) task.data.points = this.map.pathfind(this.hitbox, task.data.hitbox.pos)\r\n                if (task.data.points.length && this.pos.checkEquals(task.data.points[0])) task.data.points.shift()\r\n                if (!task.data.points.length) return true\r\n                this.moveTo(task.data.points[0])\r\n            }\r\n        }\r\n        this.taskQueue = []\r\n        this.speed = 1\r\n    }\r\n\r\n    moveTo(point) {\r\n        const diff = this.pos.getDifference(point)\r\n        const norm = diff.getNormalised()\r\n\r\n        const diffMagnitude = diff.getMagnitude()\r\n        if (diffMagnitude < this.speed) {\r\n            norm.multiply(diffMagnitude)\r\n        } else {\r\n            norm.multiply(this.speed)\r\n        }\r\n\r\n        this.pos.add(norm)\r\n    }\r\n\r\n    addTask(task) {\r\n        if (!(task instanceof Task)) return\r\n\r\n        this.taskQueue.push(task)\r\n    }\r\n\r\n    update() {\r\n        if (this.taskQueue.length > 0) {\r\n            const done = this.actions[this.taskQueue[0].action].call(this, this.taskQueue[0])\r\n\r\n            if (done === true) this.taskQueue.shift()\r\n        } else {\r\n            let dest\r\n            do dest = new Hitbox(Math.random() * 960, Math.random() * 540, this.width, this.height)\r\n            while (this.map.checkCollision(dest))\r\n            this.taskQueue.push(new Task('Random pathing', 'pathfind', { hitbox: dest }))\r\n        }\r\n    }\r\n\r\n    draw(ctx) {\r\n        const img = still\r\n        const imgWidth = img.width * 2\r\n        const imgHeight = img.height * 2\r\n\r\n        const task = this.taskQueue[0]\r\n\r\n        ctx.strokeStyle = 'red'\r\n        if (task && 'points' in task.data) {\r\n            const points = [this.pos].concat(task.data.points)\r\n\r\n            for (let i = 1; i < points.length; i++) {\r\n                ctx.strokeStyle = `rgb(${255 - ((i - 1) / (points.length - 1)) * 255}, 0, 0)`\r\n                ctx.beginPath()\r\n                ctx.moveTo(points[i - 1].x, points[i - 1].y)\r\n                ctx.lineTo(points[i].x, points[i].y)\r\n                ctx.stroke()\r\n            }\r\n        }\r\n\r\n        ctx.strokeStyle = 'white'\r\n        ctx.drawImage(img, this.pos.x - imgWidth / 2, this.pos.y - imgHeight, imgWidth, imgHeight)\r\n    }\r\n}\r\n\r\nexport default Villager\r\n","import VillageCentre from './VillageCentre'\r\nimport Villager from './Villager'\r\n\r\nclass Village {\r\n    constructor(map, x, y) {\r\n        this.villageCentre = new VillageCentre(x, y)\r\n        this.map = map\r\n        this.villagers = []\r\n\r\n        this.map.registerObstacle(this.villageCentre)\r\n\r\n        for (var i = 0; i < 5; i++) {\r\n            let newVillager = new Villager(this.map, Math.random() * 960, Math.random() * 540)\r\n            this.villagers.push(newVillager)\r\n        }\r\n    }\r\n\r\n    update() {\r\n        for (let villager of this.villagers) villager.update()\r\n    }\r\n\r\n    draw(ctx) {\r\n        for (let villager of this.villagers) villager.draw(ctx)\r\n    }\r\n}\r\n\r\nexport default Village\r\n","import Pathfinder from './Pathfinding/Pathfinder'\r\nimport Village from './Village'\r\n\r\nimport Obstacle from './Obstacle'\r\nimport Hitbox from './Hitbox'\r\n\r\nclass Map {\r\n    constructor(mapLimit) {\r\n        this.mapLimit = mapLimit\r\n        this.pathfinder = new Pathfinder(this)\r\n\r\n        this.obstacles = []\r\n        this.villages = [new Village(this, this.mapLimit.x / 2, this.mapLimit.y / 2)]\r\n        for (let i = 0; i < 10; i++)\r\n            this.registerObstacle(new Obstacle(Math.random() * this.mapLimit.x, Math.random() * this.mapLimit.y, 40, 20))\r\n        this._testHitbox = new Hitbox(Math.random() * 960, Math.random() * 540, 16, 16)\r\n\r\n        this.pathfinder.addNetwork(this._testHitbox)\r\n    }\r\n\r\n    registerObstacle(obstacle) {\r\n        this.obstacles.push(obstacle)\r\n        this.pathfinder.updateNetworks()\r\n    }\r\n\r\n    checkCollision(box) {\r\n        if (box.x < 0 || box.y < 0 || box.x + box.width > this.mapLimit.x || box.y + box.height > this.mapLimit.y) return true\r\n\r\n        for (let obstacle of this.obstacles) {\r\n            if (box.detectCollision(obstacle.hitbox)) return true\r\n        }\r\n    }\r\n\r\n    pathfind(box, destinationPoint) {\r\n        return this.pathfinder.getShortestRoute(box, destinationPoint)\r\n    }\r\n\r\n    update() {\r\n        for (let village of this.villages) village.update()\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.pathfinder.drawNetwork(this._testHitbox, ctx)\r\n        for (let obstacle of this.obstacles) obstacle.hitbox.draw(ctx)\r\n        for (let village of this.villages) village.draw(ctx)\r\n        ctx.strokeStyle = 'black'\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import Map from './Map'\r\nimport Point from './Point'\r\n\r\nclass Engine {\r\n    constructor(canvas, ctx) {\r\n        this.canvas = canvas\r\n        this.ctx = ctx\r\n\r\n        this.map = new Map(new Point(canvas.width, canvas.height))\r\n    }\r\n\r\n    update() {\r\n        this.map.update()\r\n    }\r\n\r\n    draw() {\r\n        this.ctx.fillStyle = 'white'\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n        this.ctx.fillStyle = 'black'\r\n        this.ctx.strokeStyle = 'black'\r\n\r\n        this.map.draw(this.ctx)\r\n    }\r\n}\r\n\r\nexport default Engine\r\n","import AssetManager from './src/Assets/AssetManager'\r\nimport Engine from './src/Engine'\r\n\r\nconst canvas = document.getElementById('game-canvas')\r\nconst ctx = canvas.getContext('2d')\r\nctx.imageSmoothingEnabled = false\r\n\r\nlet game\r\nconst assetManager = new AssetManager()\r\n\r\nfunction run() {\r\n    game.update()\r\n    game.draw()\r\n\r\n    requestAnimationFrame(run)\r\n}\r\n\r\nasync function initialise() {\r\n    await assetManager.onLoad()\r\n    game = new Engine(canvas, ctx)\r\n    run()\r\n}\r\n\r\ninitialise()\r\n"]}