{"version":3,"sources":["src\\Point.js","src\\Hitbox.js","src\\Pathfinding\\Node.js","src\\Pathfinding\\AStarFinder.js","src\\Pathfinding\\Network.js","src\\Pathfinding\\Pathfinder.js","src\\Entity.js","src\\Obstacle.js","src\\VillageCentre.js","src\\Task.js","src\\Villager.js","src\\Village.js","src\\Resources\\BaseResource.js","src\\Resources\\GoldDeposit.js","src\\Map.js","src\\Engine.js","index.js"],"names":["Point","x","y","value","transform","pointOrX","addition","point","_operation","console","error","subtraction","multiply","total","Math","sqrt","Hitbox","width","height","pos","boxOrPoint","box","ctx","strokeRect","newX","newY","Node","distanceMultiplier","node","pow","addToPriorityQueue","priorityQueue","item","queueIndex","instance","totalValue","slice","initPriorityQueue","srcNode","destNode","aList","checkLineOfSight","reduce","index","totalWeight","getDistance","prevNodeIndex","aStarFinder","checkSuccess","dest","currNode","checkedNodes","lineOfSight","breakCounter","length","Error","shift","canSeeDest","edge","some","hierarchicalValue","dist","priorityEdgeIndex","findIndex","el","priorityEdge","splice","edges","push","fastestRoute","lastIndex","unshift","find","log","Network","obstacles","nodeWidth","nodeHeight","adjacencyList","update","node1","node2","gradient","xt","xb","node1Top","node1Bottom","checkLowerBound","checkUpperBound","roundingOffset","surroundingBox","max","obstacle","detectCollision","hitbox","obsTop","obsBottom","newNode","newInstance","i","currIndex","Number","_checkLineOfSight","bind","strokeStyle","beginPath","moveTo","lineTo","stroke","Pathfinder","map","networks","key","_getNetworkKey","addNetwork","network","nodeList","focusedObstacle","nodes","getNodes","filter","checkCollision","addNode","Object","values","destinationPoint","_getNetwork","getShortestRoute","_buildNetwork","draw","Entity","Obstacle","xDir","yDir","VillageCentre","Task","name","action","data","still","Image","src","still_path","Villager","sideLength","actions","pathfind","task","points","checkEquals","taskQueue","speed","diff","getDifference","norm","getNormalised","diffMagnitude","getMagnitude","add","done","call","random","img","imgWidth","imgHeight","concat","drawImage","Village","villageCentre","villagers","registerObstacle","newVillager","villager","BaseResource","quantity","depleted","quantityToTake","GoldDeposit","stokeStyle","Map","mapLimit","pathfinder","villages","_testHitbox","gold","updateNetworks","village","drawNetwork","Engine","canvas","fillStyle","fillRect","document","getElementById","getContext","imageSmoothingEnabled","game","run","requestAnimationFrame"],"mappings":";;;;;;;;;;;ACAA;;ACAA,IFAMA;AACF,qBAA0B;AGD9B,AHC8B,SGDrB8B,GHCO7B,CAAc,cGD9B,CAA4B8B,aAA5B,EAA2CC,IAA3C,EAAiD,mCHC7B,CAAU;AGA1B,AHA0B,QGAtBC,IHAe/B,CAAO,QGAT,CAAjB,8DHAuB,CAAG;AID9B;ADAiD,AHCnB;AGDmB,AEAjD,IJEMc;AACF,AEH6C,AHEzC,aAAKf,CAAL,GAASA,CAAT,ECCQI,QAAZ,EAAsBH,CAAtB,EAAyBe,KAAzB,EAA+C;AKHnD,ALGmD,AGFnD,AJEQ,IEDFS,QDC8BR,CDAvBhB,CAAL,GAASA,CCAkC,ADA3C,uECAqC,IAAM;AEHF,ADG7C,AFCC,kBEDWG,QAAZ,EAAsBH,CAAtB,EAAiD;ADAF,AMHnD,AJGI,ADAiD,AGFrD,AGDA,YNG6ByB,iBCAJI,CDA4B,YCAjD,2DDA8C,CAAG,kECAb;AAAA,gBAA3BG,QAA2B;AFChC,AGFR,AFCqD,YDCzC7B,oBAAoBL,eAAxB,EAA+B;AAC3B,AEDJ,gBAAIkC,CFCKf,GAAL,GAAW,EEDFgB,EFCMnC,QEDf,AHEGG,GGFmB6B,IFCX,ADCD5B,CCDWC,AEDM8B,SFCGlC,CAAnB,AEDf,AHEyB,ECDYI,AEDM,SFCGH,CAA/B,CAAX;AACA,AMLZ,AJIY+B,ADDJ,AGFR,ALIiC,ISN3BsG,OACF,CPGQlI,KDEKY,KAAL,GAAaf,AQLTsI,CRKJ,GDCepI,ASNvB,EAAkBqI,CPGUzI,KOH5B,ETMiCG,ASNI,KTMd,CADM,EEFzB,EAA+B;ADG3B,AEDH,ADDG,AOJ6B,QAAXuI,IAAW,CNGjC,IFGSxH,ACFAC,ECCF,CDDH,GDEA,ACFW,GDEGF,CCFCjB,IDEf,WCFW,CAAUK,SAASJ,CAAnB,EAAsBI,SAASH,CAA/B,CAAX,iBOJyB,EAAI;AROhC,AEDG,ACJZ,AFGY,AFAqB,IMJ3BgI,KLEE,MAIO,ECFEvG,kBAAL,GAA0BzB,KAAK,CAA/B;AIHR,ALMQ,AEDH,ADDA,AONgC,SPGjC,MAGO,EDEEiB,GKNDlB,ALMJ,CKNR,EAAeC,ALMI,CKNnB,EAAkBe,CLMKjB,IKNvB,EAAyBkB,MAAzB,EAAiC,CLMd,CAAUb,QAAV,EAAoBH,CAApB,CAAX;AKNyB,ALOzB,AEDP,ADDO,AFDH,AUPT,iBTUiBe,ACFAE,AFDHlB,CADmB,EEErB,EDEA,CCFW,EDEEgB,ECFEjB,GDEf,YCFW,CAAUK,QAAV,EAAoBH,CAApB,CAAX;ADGA,AEXqC,ADSrC,AFFK,ASLT,SAAKsI,IAAL,GAAYA,CRSHtH,ACFAS,AFFKzB,CADW,ESJzB,GRSI,GAAcgB,MAAd,GCFA,GAA0BS,kBAA1B;AILJ,ALQC,AEZwC,ADUxC,AFFJ,ASLG,AEHR,SFGa8G,IHCA3C,EGDL,GAAc2C,CHCd,GAAc,EGDd,EHCkBzH,gBAAJ,CAAWf,CAAX,EAAcC,CAAd,EAAiBe,KAAjB,EAAwBC,MAAxB,CAAd;AACH,ALQA,AEb4C,ADW5C,AOPG,SAAKwH,IAAL,GAAYA,IAAZ;ANJyC,ASAjD,AFCA,ILGM7B,AGFAyB;ALF2C,AEK7C,AICI,WAAO,IAAP,SJDQxB,GAAZ,CLKIzG,CKLa,SLKO;AgBV5B,AbAiD,AEK5B,ALKO,AaV5B,AJOK,AENL,IPIMqE;ADL2C,ACM7C,AIHA,qBJGYC,MIHA1E,CFIF,AEJV,EJGA,AIHeC,CAAf,CJGuB0E,CIHL,GNUNhD,IDEIR,CGThB,CFOkB,CEPgByD,SHSN,CGT5B,EAA8C;AEE1C,ALQA,AahBR,AXAiD,ACMC,AFQ1C,AGRA,ALIoB,AQPN,AEDtB,IHCMsD,SFGOrB,GJUDzF,AIVJ,ALIUnB,CAAU,CSAbqI,CHFA,AJMA,AGRIzB,GJUD1F,AIVV,ECEY0E,AJMAnE,MINL,CAAYR,CLQnB,EKRA,QJMO,GAA0BL,KAAKC,IAAL,CAAUD,KAAKe,GAAL,CAAS,KAAK5B,CAAL,GAAS2B,KAAK3B,CAAvB,EAA0B,CAA1B,IAA+Ba,EFJ5D,GEIiEe,CFJ3D,EEIsD,CAAS,KAAK3B,CAAL,GAAS0B,KAAK1B,CAAvB,EAA0B,CAA1B,CAAzC,CAAjC;AILH,ALQG,AEjByC,ADe5C,AGRG,aAAK6G,GJUD3F,KIVJ,GAAgB,EAAhB,YJU0BpB,eAA1B,EAAiCqB,MAAM,IAAIL,MAAJ,CAAWI,UAAX,EAAuB,CAAvB,EAA0B,CAA1B,CAAN;AcjBzC,AZAiD,ACOzC,ACCH,ALGG,AQRc,aJITuD,GJIDrE,MIJJ,GAAiBqE,EJIF,OIJf,EJIIrE,QAAW,iFQPTL,CADQ,EACLC,CADK,EACF,EADE,EACE,EADF;APgBd,AEnByC,ACQzC,AJGe,AQNlB,aJGQ0E,MHYDvD,GGZJ,CJGwB,CAAC,CIHRuD,KJGa3E,CAAL,GCSNe,AGZnB,AJGkCT,MCS9B,ADToCN,CAAhB,EAAmB,CCUvC,KAAKA,ADVuCC,CCU5C,ADVuC,GCU9B,ADVuCK,KCUlCU,CDVwCf,CAAlC,CAAT,ECUF,GAAa,CAAtB,GAA0BmB,IAAIpB,CAAJ,GAAQoB,IAAIJ,KAAJ,GAAY,CAD9C,IAEAI,IAAIpB,CAAJ,GAAQoB,IAAIJ,KAAJ,GAAY,CAApB,GAAwB,KAAKhB,CAAL,GAAS,KAAKgB,KAAL,GAAa,CAF9C,IAGA,KAAKf,CAAL,GAAS,KAAKgB,MAAL,GAAc,CAAvB,GAA2BG,IAAInB,CAAJ,GAAQmB,IAAIH,MAAJ,GAAa,CAHhD,IAIAG,IAAInB,CAAJ,GAAQmB,IAAIH,MAAJ,GAAa,CAArB,GAAyB,KAAKhB,CAAL,GAAS,KAAKgB,MAAL,GAAc,CALpD;AejBR,AfwBK,AazBL,AXDiD,ACSzC,AJEe,AUPvB,IMFI2K,SAASG,AZOAnH,AJEL,SgBTcoH,CZOd,GAAkBpH,EEEd,AJMA,QcfC,AZOL,CYP6B,aAAxB,CAAb;AACA,AVSQ,AHZyC,ADkBzC,IcfJvD,MAAMuK,OAAOK,EVSF,AJMA,KINKpG,AJMA3E,GcfV,AdeK,Ccfa,AdeJlB,CAAhB,CINO,CAAYA,CUTjB,AVSF,CUTR;AACAqB,ADHA,ATYK,AHb4C,ACWzC,AFQH,AFNG,EQXoB6G,EQExBgE,ALDE5B,SPQOzF,GJEDzE,SgBTZ,CZOQ,EYPoB,CZOC,EAArB,EYPR,GhBSgCL,GKHbqB,ELGX,EAA+B,CKHf;ADEhB,ACDA,ALGI,AWVR,aPQS0D,MAAL,ACDO,ELGEvE,AWVDsG,CPQM,EORlB,CNOiBzF,CMPApB,CPQb,AORJ,EVwBKqB,AIjBgBL,AMPDf,CAApB,CXUQ,CAAgBG,AWVD,EVwBb,AIjBC,GAAkB,GAAlB,ALGH,EAA0BC,CKHCe,IAAIH,GLG/B,GKHJ;AWLR,AfuBQI,Aa1BR,AXQI,ACEC,ACDA,ALGI,AWXkB,IKErB8K,AJJAvB,OIIO,EhBOL,EgBPSe,CfuBLrK,EOrBG+G,CROA,IAAI,GCcX,CAAe,GDdGjI,CgBTb,CAAWwL,AfuBI5L,CAAL,GAAS,EevBnB,AhBSM,EgBTaqB,AbKjBS,CFkBsBd,EevBxB,AhBS0B,CgBTvC,EfuBgC,GAAa,CAArC,CDdW,CCc6B,EElBnBmB,CHIsB,ECcElC,CAAL,CElBjC,CAAoB,CFkBsB,AElB1C,CHI2CA,CGJpB+B,AHIa,GCcWf,EDdE,ICcP,CElB1C,CAAX,CFkBmE,CAA/D,ADdO,ECc2D,AElBvBc,AHIuB,IGJtE,CFkB2Ef,KAAvE,EAA8E,KAAKC,MAAnF,GElBoDa,cAAcK,KAAd,CAAoBH,UAApB,CAAxD;AFmBC,AElBJ,AHIW,qBAAKzB,OMFL,AJMA,GFJA,CAAgB,IAAIR,KAAJ,CAAUK,QAAV,EAAoBH,CAApB,CAAhB,EAAwCI,QAAxC;AgBRZ,AVOQ,AJMA,AFJC,AWZD,IEHF2K,KGMGoB,GAAT,ChBOe,AWVF7B,EKGE,IVOA,AJMA,AFJA,KMFK1E,AJMA3E,EShBZ,CTgBO,CAASjB,CAAhB,AShBqB,CLUd,CAAYA,CAAnB,CKVyBoI,uBAAJ,CAAkBrI,CAAlB,EAAqBC,CAArB,CAArB;AKIJkM,AVOC,AHFL,ADQK,AFJO3L,AYfR,ADGI,SKGCsE,AbKA1C,IQRIyE,EKGT,CLHI,GAAWA,GAAX,EXYYpG,EGJpB,ASXgBoK,CTWWxI,EHIf,CAAc,GOdbwD,CJUb,ASXI,ETWgCvD,AEApBlB,AOXUpB,CAAtB,EAAyBC,CAAzB,CLCiB,AFUA,COXWe,ETWhC,EAA8CuB,CSX1C,EAAmCtB,ETWvC,EAAqDuB,ESXjD,EAA2C,YTW/C,EAAuE,cHI3D;AgBRR2J,AFNJ,APCQ,AJUJ,AEAI,ALIC,AYhBsC,ADIvC,SKGCnE,EbKEzF,EaLP,ALHSiI,GJFDnD,AFUEN,CFAGtE,KEAG,AMRZ,CRQG,CIVS,AJUI,CQRC,CJFjB,CFUiBuE,AMRjB,CVyBI,MEjBalF,OEAL,CDAEiD,ACAkB3D,GAApB,CAAZ,CFAgB,ECAK4D,MDAqBtC,CCAd,IDAZ,EAAoC;AFkBpD,AM3BA,AJSoD,ACCpD,AJIH,YGLqCf,IAAkB,ACC9CsD,CGVD,EN2BE,EM3BEkD,GN2BGjH,AElBsBS,GFkB3B,AGjBU,CHiBD3B,AM3BA,AJSoC,ACClC+E,CHiBlB,AM3BiB,CAAjB,EAAoBoD,EHUIlI,CAAN,GAAU+E,EGVA,CAA5B,EAA+BmD,CHUGlI,CAAjB,KAAuB8E,CGVD,CAAvC,EAA0C,EHUI/E,CAAN,GAAUgF,MAAMhF,CAAvC,CAAjB;AYJJqM,AfsBC,AM3BO,AFUJ,AOduC,ADMvC,IINFV,SJMO9E,GNQD,AMRJ,CAAS4D,CNQH1D,GEVG,IAAIqB,AFUA,CWLKgE,EVKV,CULZ,CXKsBtF,EEVE,CAAC,AIErB,CJFI,AIEsB,EJFFsB,EFUpB,CAAJ,AMR+BmC,ENQF,GEVG,CAA5B,EAA+BnC,KIEnC,GJF2C,CAAvC,EAA0C,sEKHxCpI,CADiC,EAC9BC,CAD8B,EAC3Be,KAD2B,EACpBC,MADoB;AIU9C,ADTG,ATcI,ACVQoG,AJQR,ACEA,ACAI,YFFA7E,ICEE0C,GEAC,CSdC0G,CXcG3G,ACAFgC,GCAGpB,ESdhB,Ad+BMtE,AM3BY4C,EQJE9C,CZYKgB,CGEd,ACVC,CQJZ,ATcuBrB,ACTP,AFSR,CJiBI,AGjBc,ACAFI,CUdC,AXcV,EGTKK,AFSZ,CCAJ,AHFI,ACEsB,CAAC,CDFGE,ACEnB,GAAoB,CDF3B,ACEJ,CDFA,EAAqC,IIPzB,CAAS,KAAK3B,CAAL,GAASmI,QAAQ,KAAKnH,KAAL,GAAa,CAAb,GAAiB6E,OAAO7E,KAAP,GAAe,CAAxC,CAAlB,EAA8D,KAAKf,CAAL,GAASmI,QAAQ,KAAKnH,MAAL,GAAc,CAAd,GAAkB4E,OAAO5E,MAAP,GAAgB,CAA1C,CAAvE,CADJ;AQJa,ATexB,ALiBG,Aa/BR,APMa,AJMD,ACEJ,ACAC,AObD,ADKA,ADNR,IAAMyH,QAAQ,CCMD,CCLAmC,ETWKlI,ACEJwC,AMdIwD,CT+BLzH,AUzBIgF,GVyBT,CAASlG,AGjBEiF,AORE,ADNP,CT+BN,AW9BA,ADKA,CDNR,CCMwBiB,CVyBH3E,AW9BGsJ,GZgBhBzK,AWXoB,CVyBpB,AUzBA,CRMwBiC,CQND6D,CPQD,CAAX,AQbX,CDKA,EPQ0B,AORE,CPQjB,CDFqBtD,AHKZ,EIHU,CAAC,CAA/B,ODFwB,CAAoBjB,IAApB,CAApB;AaFZyK,AfsBK,AMzBI,APUmB,AYfpB,ADKI,ADNZ1D,MAAME,GAAN,GAAYC,EECCiC,EDKGJ,ETaDjJ,IUlBP,GAAgB,EFDxB,GECQ,ADKsB,IAAIqH,kBAAJ,CAAa,KAAKjC,GAAlB,EAAuBhG,KAAKmJ,MAAL,KAAgB,GAAvC,EAA4CnJ,KAAKmJ,MAAL,KAAgB,GAA5D,CAAlB;AIPJ,ARQA,AJMI,ACEJ,ACAA,AOlBuC,ADUnC,aIRC4B,GXgBCxG,CORGoF,EIRT,ARQOnD,AJMIxF,AEEJ,GUhBO+J,ERQd,AFQY9E,EMRR,CPQa,AORE3C,CIRnB,GXgBqBpE,AORjB,CNQG,AMRiB2K,CNQH3D,GAAd,CAAP,CFF8BjF,KQN1B,GPQa,CAAUiD,IDFhB,EAAkC,ACEZ/E,CAAN,GAAWkF,KAAK,KAAKP,SAAX,GAAwB,CAA5C,EAA+CI,MAAM9E,CAAN,GAAU,KAAK2E,UAAL,GAAkB,CAA3E,CAAjB;AWfA,ARQH,AJMWlC,ACER,ACAH,ALAuB,AYdvB,ADMI,IDNHoG,SKFOzH,GAAL,AXgBMgE,AJAIpF,CAAU,EehBToB,GAAX,MTcS,AHDoC,ECGzB,IAAItB,eAAJ,CAAUgF,MAAM/E,CAAN,GAAWmF,KAAK,KAAKR,SAAX,GAAwB,CAA5C,EAA+CI,GJArD,GIA2D9E,CAAN,AJA/C,GIAyD,KAAK2E,UAAL,GAAkB,CAA3E,CAApB;AEDA,AHAQ/B,AQNX,mBLMU,KAAKgD,ILkBR,EKlBG,CAAY5E,AHAI,CAAC,CAFqB,IGE7C;ASbA,ATcH,ALkBG,AElBQiB,ACER,AJDA,gBICMoD,AJDF5E,GCiBG,KAAKQ,GAAL,CAASjB,AElBIqC,CFkBpB,AYrCCjB,CboBiB,IICM,ASrBlB,GVmBuBuB,EHCzBlC,IICE4E,KDFc,CAAqB3D,CHCvB,GGDE,IAA6BgB,CCEzB,UDLqB;AYV7C,AdgCH,AElBWA,ACCgB,AJDN,AanBlBtB,AHKJ,aKASwF,GAAL,AFLIoE,GEKO,GLAHpE,CKAOqE,AXekB5K,AJDN,CAAC,CUdhC,CGLI,CHKaN,CAAjB,CNe2CC,ASpBtB,CToBgB,AMfjBA,CVciBD,AUdrC,CVcgC,CICeiF,AMfxB,EVckB3E,AanBrC,CEKW,CAAQ,CVeTc,GUfarB,AfcoBC,CAAhB,CKCZ,CLD+B,CICSM,MAAMN,AJDVC,CICI,AJDT,GICmBmF,AJDV9E,CedpC,CAAUsL,IfcgC3L,CAAlC,CAAT,CedkBe,AXesChB,CAA/B,IWfxB,AXe4DoF,EWfpCwG,OAAO3K,AXesChB,CAAhE,KWfL,CAAR,CAAX;AACH,AZSgD,ACKrB,ACAT,ALDG,AalBlBoB,AHImB,EHNJ4G,WJgBJ,ACKX,AJDA,CGJI,EUdA3G,UZqCFE,AYrCF,CAAe,IDKZuJ,CXgCK,AYrCY/K,CAAL,GAAS,KAAKgB,KAAL,CDKL,ECLkB,CAArC,EAAwC,KAAKf,CAAL,GAAS,KAAKgB,MAAL,GAAc,CAA/D,EAAkE,KAAKD,KAAvE,EAA8E,KAAKC,MAAnF;AZsCA,AElBC,ACAD,AQdA,ACLH,ICCCiK,YVkBQ3F,AQdF,CXgCCrE,GAAL,CAASjB,AWhCA4K,CXgCT,GAAarJ,IAAb,AWhCI,GAAgBuJ,CDMf,CPQmB,SAAlBxF,GQdF,GAAiC,CAArC,EAAwC,MRchB,CQduBwF,cAAP,CAAxC,KACK;AXgCR,AapCD,AXkBI,ACDwB,ACAxB,ALAA,AYZI,ADIC,ADPL,YAAMhC,GPgBCjH,CEDHoF,ALAA9G,CcjBI+K,CPSDjD,GKJE4C,ERYwBxK,EUjBrC,AJEuBoI,CLeL,CSjBI,CXkBlB,CCDuCzI,AQZnC,CRY6B,ACAfwE,CKfOzD,CEGL,CRYuBiE,GJAnBlF,AYZpB,AFHe,GAAc,CAAjC,CVeA,EAA+B,EIAwBO,ECAzC,CAAY,GDAmCN,CAAN,CCAxB6G,EDAkCxB,CCAvC,CAASX,SAArB,CDA+D1E,CAAlC,ACAGoB,IDAoCiE,ACAhCrE,KAApC,EAA2CI,IAAIH,CDAiChB,CAAtE,ICAV,C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AAO,GIHnB,CAAaxC,AJGD,KIHMmJ,MAAL,KAAgB,KAAKmB,QAAL,CAAcnL,CAA3C,EAA8Ca,KAAKmJ,MAAL,KAAgB,KAAKmB,QAAL,CAAclL,CAA5E,EAA+E,EAA/E,EAAmF,EAAnF,CAAtB;AADJ,AXoBJ,ACpBgC,ACcxB,ALKQ,AWjBP,ADGG,QPeRkD,CWlBA,KAAKmI,OJGQ7E,CPeC,EENJY,CSZV,CXkBJ,COfY,CIHW,AJGC6B,IIHGnI,ATYLqG,CKTOqB,IAAL,CAAUU,MAAV,CAAiB,CAAjB,CAAZ,CIHW,ATYe7B,CSZJzG,KAAKmJ,ETYjB,CAAyB5I,GSZb,ATYZ,CAAd,ISZ0C,GAA3B,EAAgCP,KAAKmJ,MAAL,KAAgB,GAAhD,EAAqD,EAArD,EAAyD,EAAzD,CAAnB;ACIA,ADHA,AVkBA,ACNI,AMbC,ADIA,aIHAuB,ICGAlK,ADHL,GCGA,ADHY,CCGHwK,GDHOb,ATYN9H,MUTV,GAAqB,IXeA,ECNImE,CUTzB,EXe0B3C,GUlBd,ATYmB6C,CSZH,IAAhB,CVkBZ,ACNyB,CSZS,ATYI,GSZ1B,EAA2B,GAA3B,EAAgC,EAAhC,EAAoC,EAApC,CAAZ,4GVkBqC;AWdrC,AZeJ,ACDyC,ACNC,ALKtC,AWlBK,ADFU,QPsBf,CAAC/E,AOtBD,OVoBI7B,CebCU,GAAL,CAASyK,GXcAnG,EDCStD,CHFH,Eebf,CAAkB,CAAlB,AVQ4C,CDMP,ACNQ,CURxB,AZepB,CYfD,CZe2BC,CYfH,AfapB3B,EKL8CkG,GURrB+E,AVQgB,CAASpE,CFOrD,CAAL,AHFmB,EGEuB,CYfd,CAAYxG,KAApC,EAA2C,CVQE,CAAwB,GURrB4K,CVQyB7K,KUR9B,CAAYE,MAAvD,IVQqE,CAAW8C,GAAG7C,GAAd,EAAmBE,IAAIJ,KAAvB,EAA8BI,IAAIH,MAAlC,CAAxB,CAAP;AUPtC,ADHA,AXkBAkC,AERsC,ALKvB,AWlBV,ADML,aIHKsH,CJGApB,GKAAhI,GAAL,CAASwK,AVOgB,CFQX,AERV,CLKoB,AUZxB,CVYyB,EUZR,CPejB,COfA,CIHA,CCGA,ADHsB,CdeQ7L,CAAL,CeZJ,EDHMuL,AdeOrL,IcflC,CCGA,AfYwB,EAAiB,OAAKD,CAAL,GAASC,KAA1B,CAAT;AeXf,AZeA4B,ACFI,ACT4C,ALOjC,AWlBV,ADOL,aVWA,CUXKwH,GKAAjI,ELAL,CKAA,CAASkF,CLAI,CAAb,CPegBnE,ACFRqD,QWbR,GAAuB,IXaAG,GWbvB,AZekCvD,OAAlB,EAA2BC,GCFnC,CAA+BqD,IDEvB,EAAqCpD,GCFLsD,EDEhC,EAA4CrD,ECFpD,CAAJ,EAAqD,WDEzC,CAAhB;AWjBA,AXkBH,ACFW,ACVwC,AMX3C,ADRc,aIad4I,UAAL,CAAgBnE,IVgBFnB,MUhBd,CAA2B,EVgBJ,GUhBSwF,CVgBLvL,UUhB3B,KVgBuB,CAAU4F,SAAS3F,CAAT,GAAckF,KAAKS,SAAS3E,KAAf,GAAwB,CAA/C,EAAkD2E,SAAS1F,CAAT,GAAa0F,SAAS1E,MAAT,GAAkB,CAAjF,CAAf;AWZR,ADHH,AVgBW,ACXwC,ALShD,AWpBK,ADQR,gBVYO,CeXC4F,GAAL,CAASmB,EfWE9H,EeXX,CAAc,EXaA6F,AJFV,GeXe1E,EfWE,CeXrB,MXa0B,CJF1B,EAA+B,CIEDtB,eAAJ,CAAU4F,SAAS3F,CAAT,GAAcmF,KAAKQ,SAAS3E,KAAf,GAAwB,CAA/C,EAAkD2E,SAAS1F,CAAT,GAAa0F,SAAS1E,MAAT,GAAkB,CAAjF,CAAlB;AWZX,AZeD,AHJQ,AWrBC,QRyBL+B,OAAO,MHJEzC,UAAL,CAAgBL,KAAhB,EAAuBS,QAAvB;AGKJgB,ACFQ,ACbwC,ALW/C,AWtBI,aXoBL,CGMMW,KHJC,GGGA,MCDKgD,gBAAgBS,SAAhB,KAA8BR,gBAAgBO,MAAhB,CAAlC,EAA2D,OAAO,KAAP;ADGnEnD,ACFK,ACXD,ALSAnC,AWvBC,qBR2BQ,CAAC,CAFP,CHFKC,KAAR,CAAc,gBKTGyC,YAAjB,gCLSA;AGKJL,ACFC,ACZG,ALUH,AWxBI,uBR4BU,CAAC,OOlBbvC,CLIUqB,KAAT,CKJM,GIFGgE,UAAU;AACvB,AXgBO,AC3BqB,ACgBOwB,ALWtC,AWzBQ,ADWL,KPcJ,WOdUoC,CIFD7E,MJEQ,GIFb,CAAeP,CJEGjD,GIFlB,AJEa,CIFOyE,AJEE6D,KLGsBrF,GSL5C,CTKmC,CAAcxC,GKHpC,CAAuBrB,CLGD,IKHtB,CAAb;AIDA,AVZ4B,ACgBxB,AMZP,ADUG,gBAAMmJ,CIFD2B,MJEQ7B,IIFb,CAAgBiC,AJEE9B,aAAL,CIFb,CJEA;AIDH,AXoBD,ACjCgC,ACaoB,QFoBhDtG,UYlBOuI,KZkBQ,KAAnB;AACA,AClCgC,ACaoB,AKGhD,QPkBA1I,QOlBM0G,SPkBV,OOlB0BJ,IVadjJ,CUbmBsJ,MVaZ,MUbO,EAAtB;ANhB4B,ACaoB,ALiBhD,AUbA,gBAAID,GVaGrJ,MAAMN,CAAN,GWxBNqB,EXwBkB,CUbC,ECXd,EXwBkBrB,CAAjB,AUbkBsJ,IVaIhJ,CUb7B,EAAgC,GVaGL,CAAN,KAAY,KAAKA,CAA9C;AGMJ,ACpCgC,ACaoB,ALkBnD,AWzBS,ADYFwJ,WPkBD3H,UOlBMnB,IPkBQ0C,IOlBb,CAAcsG,CPkBtB,EAA6B,MWrBdvI,IJGP,CIHY;AAChB,AXqBA,ACrC4B,ACaoB,AMP1C,ADaL,YPkBGgC,COpBJ,GIDIhC,GJGG,CIHCpB,CAAJ,GAAQ,CAAR,IAAaoB,CXqBK,CAAtB,EWrBqBnB,AXqBI,CWrBR,GAAQ,CAArB,CXqB2B,GWrBDmB,CXqBKkC,GWrBDtD,CAAJ,CXqBC,CAAU,CWrBHoB,IAAIJ,KAAZ,GAAoB,KAAKmK,EXqBxB,CAAN,KWrByB,CAAcnL,CAA5D,IAAiEoB,IAAInB,CAAJ,GAAQmB,IAAIH,MAAZ,GAAqB,KAAKkK,QAAL,CAAclL,CAAxG,EAA2G,OAAO,IAAP;AVhB/E,ACaoB,AMP1C,ADcFwJ,qBAAK9I,QAAL,CAAc,KAAK2I,KAAnB;AILY,AXwBhBrG,ACvC4B,ACaoB,AKQ/C,mBPkBUnB,cAAcyB,KAAd,EAAX,AHNY;AclBI,AXyBhB,ACxC4B,ACaoB,ALqBhD,AW5BM,YRkCAC,IHNF,KAAKxD,CAAL,GGMewC,CHNL,KAAKvC,CAAnB,EAAsB,QGMcqC,QAAjB,EAA2BC,MAAMU,SAASP,KAAf,EAAsBf,IAAjD,CAAnB;AWzBgB,AVfY,ACaoB,ALsB5C,AW5BJ,ADgBA,iBAAKT,GVYKN,AUZV,CAASiJ,GAAT,CAAaJ,GVYK5I,CUZlB,IVYuBC,IAAL,CAAU,AW5BP,KX4BYd,AW5BPwK,CX4BE,GAAS,KAAKxK,AW5B1C,CX4B4B,GAAkB,KAAKC,CAAL,GAAS,KAAKA,CAA1C,CAAd;AGOJ,AC1C4B,ACaoB,ALuB5C,AW7BJ,ADiBH,YPkBO8C,WHNO,CW7BF4H,CRmCQ3H,EHNFjD,EGMX,EAAmBkD,CHNZ,AW7BX,CX6BqB,KAAKjD,CGMtB,AHNiB,CGMrB,EAAkC,AHNJY,KAAnB,EAA0B,KAAKX,CAAL,GAASW,KAAnC,CAAP;AcrBY,AVfY,ACaoB,ALwB/C,AW9BoC+J,aX2BrC,MAGO,UW9BuC3C,IAAT,CAAc3G,GAAd;AGWrC,AXkByB,ACpCG,ACaoB,ALyB5C,AW/BJ,uBX+BW,IAAItB,KAAJ,EAAP,CGMK0D,EW1BY,EXkBI,GWlBCiB,SAA1B,8HAAqC;AAAA,AX2BjC,AEhC4C,AL0B/C,AWjCK,wBGYGiB,QAA4B,AJQjCuD,MAAM;APoBN,AChBJ,ACjBgD,AL2BnD,AWlCS,ADqBN,gBPmBQhG,AOnBJ,EAAEgG,CNGC,IAAP,MDgBqBxF,IAAb,CAAkB,AOnBJ4E,cAAlB,CAAJ,EAA6B;AIRzB,AX2BsB,ACf7B,ACdI,AMXK,uBRwC4B3G,CW3B1BP,IAAIwE,AX2B2BlD,KAAL,KAAee,IAAvB,CW3BlB,CAAoBkC,SAASE,MAA7B,CAAJ,EAA0C,OAAO,IAAP;AAC7C,AX0ByB,AErCX,AMHT,ADuBN,aPiBQ,CAAJ,EAAoD,COjBnDwD,SAAL,CAAelF,IAAf,CAAoB+E,IAApB;AIdgB,ATND,AMHT,ADwBT,sCVYa5I,OAAO;Ac3BD,AXiCZ,AEvCW,ALkCf,AWrCM,gBXqCFA,gBIVA0F,CJUiBjG,KAArB,EAA4B,CIVf,MJUsB,IAAIA,KAAJ,CAAUO,MAAMN,CAAN,GAAU,KAAKA,CAAzB,EAA4BM,MAAML,CAAN,GAAU,KAAKA,CAA3C,CAAP;Ac5BZ,AXkCZ,ACfJ,ACzBe,ALmClB,AWtCS,gBR2CI0D,ACfNqC,mBAAmBvE,CDeOa,SAASM,ICfvC,EAA6B,KDeC,CAAqBL,MAAMkB,IAAN,EAAY9B,IAAjC,CAA1B;AWlCY,AXmCZ,ACfA,AC1BW,AMHT,gBR4CIgB,ICfAsD,UDec1D,GOlBnB,CNGmB,EDeMU,ACfJtB,MAAMqE,GDeOtD,ICff,CDeA,CCfiBwB,CDeKvC,IAAtB,CAA2BiB,CCfH,EAAxB,EAApB,MDeoB,CAAuCL,MAAMkB,IAAN,EAAY9B,IAAnD,IAA2DsB,SAASN,WAAxF;AWnCY,AXoCZ,AE1CW,AMHT,AD2BN,gBPkBUT,AOlBN,KAAKmH,QPkBc1F,COlBnB,CAAeN,MAAf,GAAwB,CAA5B,EAA+B,MPkBYV,WAAvC;AWpCY,AVsBZ,AC5BW,AMHT,AD4BF,oBAAMmH,CNGD,IAAI5D,CAAT,CMHa,GNGC,EMHI8C,GNGCnE,IJSZ,AUZM,CAAa,KAAKwE,GNG/B,EAAkC,IMHR,CAAe,CAAf,EAAkBb,MAA/B,EAAuCuB,IAAvC,CAA4C,IAA5C,EAAkD,KAAKV,SAAL,CAAe,CAAf,CAAlD,CAAb;AInBY,AXsCZ,ACfI,AC7BO,ALsCf,AWzCM,mBXyCCxI,KITOsF,AJSFrF,IAAL,CAAU,KAAKd,CAAL,CITSoG,EJSA,KITOF,AJSFlG,CITL,AJST,CITT,EJS2B,KAAKC,CAAL,GAAS,KAAKA,CAA1C,CAAP;AchCgB,AXuCZ,ACfI,AC9BO,ALuClB,AW1CS,AD8BF,gBPkBIuD,IOlBAsG,INGM7G,EDeV,EAAgB,COlBH,IAAb,ENGqB,AMHF,KNGO4B,AMHFwE,SAAL,CAAe9F,GNGb,CAAmB4C,CMHrB,QNGE,EAA8BxE,IAA/C;AUxBQ,AXwCR,AE9CO,AMHT,AD+BL,aAJD,MAIO,CPkBOiC,OAAOtB,SAASM,WAAT,CAAqBL,MAAMU,SAASP,KAAf,EAAsBf,IAA3C,CAAb;AWxCQ,AXyCR,ACfA,AChCO,AMHT,ADgCF,oBPkBQqB,AOlBJA,INGI,CDeKL,ICfA0D,IMHb,GPkBQ,GAAmB,CAAnB,IAAwBzC,ECfxB,CAAuBoC,IDeQhD,GCf/B,EDeoCL,ACfJM,QAAhC,CAAJ,EDeA,ACf+C,EDeM;AWzC7C,AX0CJD,ACfAiD,ACjCG,AMDlB,AD+BO,yBPkBatD,WAAL,ACfYuB,GDeON,ECfnB,CAAkBO,CDelB,GCfA,CAAuBgC,SAAvB;AU3BI,AX2CJnD,ACfA,AClCG,AK8BRA,yBPmBUH,EOnBH,ENIGgC,EMJC9D,OPmBN,GAAqBkC,CCfrB,CAAmBkD,IMJjB,CAAWtF,EPmBiB6B,ECf9B,CMJkBsH,CNIY9F,CDe9B,ICfA,AMJa,CNIuBC,IAApC,AMJ6B,CNIY,EMJvC,EAAgCtD,CNIYgE,IMJPmF,MAAL,GNIO,CAAmB3G,CMJV,GAAhD,ENIF,AMJuD,KAAKrC,KAA1D,EAAiE,KAAKC,MAAtE,CAAP;AIxBS,AX4CP,ACfA,ACnCM,AK8BX,yBACO,KAAK4F,GAAL,CAASW,cAAT,CAAwBxE,IAAxB,CADP;AIxBY,AX6CX,ACfA,AMJD,kBVUGjD,GUVEsJ,SAAL,CAAelF,IAAf,CAAoB,IAAImE,cAAJ,CAAS,gBAAT,EAA2B,UAA3B,EAAuC,EAAEzC,QAAQ7C,IAAV,EAAvC,CAApB;AIpBP,AVyBO,ACrCW,AKiCd,qBNIQ6B,aAAL,CAAmBV,IAAnB,CAAwB8B,WAAxB;ADgBA,ACfH,ACtCc,AKkClB;APoBO,ACfP,ACvCkB,gBFsDLpC,EQpDHyG,kBRoDuBxI,cAAcgC,SAAd,CAAwB;AAAA,uBAAMC,GAAGrB,KAAH,EWxCvDtB,GXwCoEqC,EWxC/DmE,EXwC4C,gBWxC1B;AAC5B,AXuCsD,AEtDvC,aFsDe,CAA1B,KWvCG,KAAKwD,KJqBX/J,KIrBM,AJqBD,CIrBiByG,gBAAhB,CAAiC1G,GAAjC,EAAsCwG,gBAAtC,CAAP;AACH,ATNG,AK2BA,gBAAMqC,MAAMvB,KAAZ,WL3BiBvB,GD+BJ9E,KC/Bb,ID+BsBC,UAAU;ADe5B,ACdJ,AChCA,AK4BA,gBPkBQuB,AOlBFqG,GNIC,KChCEvI,GK4BQsI,CL5BjB,GK4BqBjJ,KPkBO,AOlBX,CPkBY,CAAzB,COlByB,CPkBG,AOlBhC,MNImBqB,OAAZ,EAAqBC,QAArB,EAA+B,KAAKuC,aAApC,EAAmD,KAAKwB,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAnD,CAAP;ADeQ,ACdX,ACjC8BY,AK6B3B,gBAAMiD,IPkBQnG,QE/CqByD,AK6BjBwC,IAAIhJ,GPkBOa,AE/CF,CAAgBH,EK6BzB,EL7BS,CK6BI,CAA/B,OPkB2CkC,iBAAd,CAArB;AE/CR,iCSQK;AAAA,AXyCG,AE3DO,AKyCf,gBAAMqF,IPkBMlF,GOlBC,KAAKqF,KPkBOnH,IOlBZ,CAAe,CAAf,CAAb,GPkBY,IAA2BA,UAA/B,EAA2C;AWzC9C,ATlBU,6BD6Cdb,KAAK;AU3BD,AX2CGS,AChBF,AC7CS,AK2CfT,gBAAIkF,WAAJ,GPkBsBtC,AOlBJ,KAAlB,CPkBQ,CAAqBJ,iBAArB,EAAwC,CAAxC;AACH,ACjBC,AC7CS,AK4Cf,gBAAIqF,QAAQ,YAAYA,KAAKT,IAA7B,EAAmC;AI1B9B,AV2BC,AC7CS,AK6CX,oBAAMU,SAAS,CAAC,KAAKjI,GAAN,EAAWkJ,MAAX,CAAkBlB,KAAKT,IAAL,CAAUU,MAA5B,CAAf;AI1BJ,AX6CIrH,AEhEW,4BFgEKD,UW7CA,KAAKwJ,IX6CcvJ,IW7CvC,SX6CoB,EAAkC;AW7CtD,AX8CQY,ACpBF,AC7CS,AK+CX,qBAAK,EPkBMe,CW9CNgI,CJ4BIvF,EPiByC,EOjBrC,CAAb,CI5BJ,CJ4BoBA,IAAIiD,OAAO9F,MAA3B,EAAmC6C,GAAnC,EAAwC;AI5BTuF,AX+C3B5I,ACpBR,AC9Ce,AKgDPxB,wBAAIkF,II7B+BzB,GX+CpB7B,GW/CY,CJ6B3B,GNFoB,EDoBIP,GCpBCmC,EDkBqB,GOhBrB,MAAO,CAACqB,CNFzC,GME6C,CAAL,KAAWiD,OAAO9F,MAAP,GAAgB,CAA3B,CAAD,GAAkC,GAAjE,kGNFwC;AU3BhD,AXgDQnB,ACrBwC,AC9CjC,AKiDPb,wBAAImF,SAAJ,KPe8C;AW9CjD,AXkDG7D,ACtBwC,AC9CjC,AKkDPtB,wBNJGM,AMIC8E,INJoC,EMIxC,CAAW0C,KNJRxH,EMIeuE,ENJsB,EMIlB,CAAX,EAAclG,CAAzB,EAA4BmJ,OAAOjD,IAAI,CAAX,EAAcjG,CAA1C;AIhCH,AX8CiD,AClBN,AC9CjC,AKmDPoB,aPaY,CAAhB,UClBa6C,AMKLwC,KNLoC,CMKxC,CAAWyC,MNLFjF,CMKSgC,CAAP,EAAUlG,CNLmB,AMKxC,EAAwBmJ,OAAOjD,CAAP,EAAUjG,CAAlC;AIjCH,AXSoB,AE3BV,AKoDPoB,wBAAIsF,MAAJ;AIlCH,AV6BDtF,AC/CW,AKqDV,wBNNGkF,WAAJ,GAAkB,MAAlB;AU7BC,AXSoB,ACqBrBlF,AChDW,AKsDd,wBNNOC,UAAJ,CAAeK,KAAK3B,CAAL,GAAS,KAAK2E,SAAL,GAAiB,CAAzC,EAA4ChD,KAAK1B,CAAL,GAAS,KAAK2E,UAAL,GAAkB,CAAvE,EAA0E,KAAKD,SAA/E,EAA0F,KAAKC,UAA/F;AU9BC,AXSoB,ACmBuB;AU5B3C,AXSoB,ACmBuB,AClChD,AK4CAvD,gBAAIkF,GL5CGW,OAAP,CK4CA,GAAkB,OAAlB;AItCK,AV4B2C,ACjCnD,AK4CG7F,gBAAIgJ,SAAJ,CAAcJ,GAAd,EAAmB,KAAK/I,GAAL,CAASlB,CAAT,GAAakK,WAAW,CAA3C,EAA8C,KAAKhJ,GAAL,CAASjB,CAAT,GAAakK,SAA3D,EAAsED,QAAtE,EAAgFC,SAAhF;AIvCK,AXSoB,AO+B5B;AIxCQ,AXiBL,ACWgD,kCDX/B5H,MAAMU,SAASP,KAAf,EAAsBwB,KAAvC,mIAA8C;AWjBzC,AXiByC,ACc1C,oBDdKT,IAAqC,iBEpBjC,KDkCQS,KAAjB,mIAAwB;AU/BvB,AV+BuB,AClCf,gCDkCAT,IAAe;AU/BvB,AXiByC,AEpBjC,EK/BEwE,+BPmDNxE,IAAqC;AWjBzC,AVgCGpC,ACnCK,gCDmCDkF,WAAJ,GAAkB,MAAlB;AU9BX,AXeiD,ACgBtClF,kBMUDyH,cNVKtC,SDQuC,ACR3C;ADmBP,AClBOnF,ACrCK,gCDqCDoF,MAAJ,CAAW9E,KAAK3B,CAAhB,EAAmB2B,KAAK1B,CAAxB;ADzBiB,AC0BjBoB,ACrCR,gCDqCYqF,MAAJ,ACrCYgB,CDqCD,KAAK7C,CCrCG8C,MAAP,CAAc,KDqCf,ACrCoBb,CDqCDrD,IAAnB,EAAyB9B,CCrCxB,CAApB,EDqCmB,CAA8B3B,CAAzC,EAA4C,KAAK6E,aAAL,CAAmBpB,IAAnB,EAAyB9B,IAAzB,CAA8B1B,CAA1E;AD1BiB,AC2BjBoB,ACtCR,wBAAS6F,KSMR7F,ETND,CDsCYsF,EUhCN,IVgCE;AU/BR,AXIyB,AC4BpB,ACvC6CO,iBSO7CkE,UAAL,CAAgBM,ATP0C5G,MAAR,GAAiB,ESOnE,CAA4B,CTPsB,ISOjBwG,WAAjC,EAA8CjK,GAA9C;AADM,AXKmB,ACmBuB,AC9BhD;ASMM,AXKmB,ACmBuB,AC/BnC;ASOP,AXKmB,ACmBuB,AC/BnC;AFYY,ACmBuB,AC/BnC;ASOP,AXKmB,ACmBuB,AC/BnC;ASSb,AXGyB,ACmBuB,AC/BnC,sCSSQ,KAAKqD,SAA1B;AAAA,AXGyB,ACmBuB,AC/BnC,wBSSJiB,QAAT;AAAqCA,AXGZ,ACmBuB,AC/BnC,6BSSiCE,MAAT,CAAgBmC,IAAhB,CAAqB3G,GAArB;AAArC,AXGyB,ACmBuB,AC/BnC;ASOP,AXKmB,ACmBuB,AC/BnC;ASOP,AXKmB,ACmBuB,AC/BnC;ASOP,AVwB0C,AC/BnC;ASOP,AXkDN6B,AC1BgD,AC/BnC,qBFyDAiB,IAAb,CAAkBlB,QAAlB;AWlDM,AXmDT,AC3BmD,AC/BnC;ASOP,AVkCL,ACzCY;ASOP,AXqDV,AC9BU,AC5BT;ASKS,AXsDV,AC/BU,QD+BNmB,eAAe,CAAC9B,SAASpB,GAAV,CAAnB;AWtDU,AXuDV,AChCU,QDgCNmD,YAAYrB,KAAKH,aAArB;AWvDU,AVuBA,yCC1BOzB,KAAKwG,kBAAkB;ASG9B,AXyDV,AClCU,ACzBN,WF2DGvD,KE3DGhC,QF2DU,CAApB,CE3DoB,CF2DG,GE3DCZ,cAAJ,CAASL,IAAIF,GAAb,CAAhB;ASEM,AX0DNkD,ACnCM,ACxBN,gBAAM9B,KF2DOgC,ME3DI,CF2DjB,CAAqB/B,EE3DAd,IF2DM4C,SAAN,CE3DJ,CF2DqB1C,AE3DZiG,IF2DL,CAAsB1G,GAA3C,QE3DiB,CAAjB;ASCM,AX2DNmD,ACpCM,ACvBN,gBAAI6C,IF2DQhE,ME3DE,KAAK2E,EF2DMtD,IAAb,CAAkB,IE3DhB,CAAiBnD,GAAjB,CAAd;ASAM,AX2DwB,ACpCxB,mBDoC8B2C,GAAGrB,KAAH,KAAa2B,SAAnB;AAAA,ACpCxB,ACrBN,SFyDY,EAAgDxB,QEzDrDqE,KFyDP,GEzDeY,gBAAR,CAAyBzF,OAAzB,EAAkCC,QAAlC,CAAP;ASFM,AX4DT,ACrCS,ACpBT;ASHS,AX6DV8B,ACtCU,iBDsCGE,OAAb,CAAqBjC,QAAQnB,GAA7B;AW7DU,AVuBA;ADwCV,ACxCU,mCClBCE,KAAK;ASLN,AXgEV,ACzCU,ACjBN,QF0DA,CAAC+B,OE1DG,EAAE/B,EF0DN,IAAgBgD,SE1DKrD,IF0DQsC,MAAb,KAAwB,CAA5C,AE1DQ,CAAJ,CF0D2C7C,CE1Db,OF0DqBgE,AE1Dd,GF0DM,CAAY,CE1DzB,8CF0Da;AW7D3C,sCAAoB,KAAK6G,QAAzB;AAAA,AX+DJ,AC/BIhK,AC3BA,WF0DG+C,KC/BCmC,AC3BEQ,MAAM,CF0DhB,CW/Da0E,GVgCT,AC3BiBzE,GD2BC,CUhClB,MVgCA,IC3BY,CAAoB5F,GAApB,CAAZ;ASLmCqK,AXgE1C,AC/BI,AC3BG,gBAAI,EAAE1E,OAAO,GSN8BiB,ETMzBlB,ESNiB,CAAazF,GAAb,ETM/B,CAAJ,EAA6B;ASN7B,ATOI,oBAAI6F,UAAU,KAAKa,aAAL,CAAmB3G,GAAnB,CAAd;ASVE,ATWF,kBF0DG0B,GE1DEgE,QAAL,CAAcC,GAAd,IAAqBG,OAArB;ASXE,ATYL;ASZK;AAAA,ATcN,mBAAO,IAAP;ASdM,ATeT,kBDwBUzC;AUvCD;AAAA;AAAA,oCTiBErD,KAAKC,KAAK;ASjBZ,ATkBN,gBAAI6F,UAAU,KAAKW,WAAL,CAAiBzG,GAAjB,CAAd;ASlBM,ATmBN8F,oBAAQc,IAAR,CAAa3G,GAAb;ASnBM,AToBT;ASpBS;AAAA;AAAA;;AAIN,iBAAKkK,IAAL,CAAUvD,IAAV,CAAe3G,GAAf;AACH,kBTkBUuF;;;;;;kBSfAsE","file":"Village-Simulator.d7a6cc1e.map","sourceRoot":"..","sourcesContent":["class Point {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    _operation(value, transform) {\r\n        [this.x, this.y] = transform(value)\r\n    }\r\n\r\n    add(pointOrX, y = null) {\r\n        let addition = point => [this.x + point.x, this.y + point.y]\r\n\r\n        if (pointOrX instanceof Point) {\r\n            this._operation(pointOrX, addition)\r\n        } else if (typeof pointOrX === 'number' && typeof y === 'number') {\r\n            this._operation(new Point(pointOrX, y), addition)\r\n        } else {\r\n            console.error('Error Point.add didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    sub(pointOrX, y = null) {\r\n        let subtraction = point => [this.x - point.x, this.y - point.y]\r\n\r\n        if (pointOrX instanceof Point) {\r\n            this._operation(pointOrX, subtraction)\r\n        } else if (typeof pointOrX === 'number' && typeof y === 'number') {\r\n            this._operation(new Point(pointOrX, y), subtraction)\r\n        } else {\r\n            console.error('Error Point.add didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    multiply(value) {\r\n        let multiply = value => [this.x * value, this.y * value]\r\n\r\n        if (typeof value === 'number') {\r\n            this._operation(value, multiply)\r\n        } else {\r\n            console.error('Error Point.multiply didn\\'t receive the correct arguments')\r\n        }\r\n    }\r\n\r\n    checkEquals(point) {\r\n        return point.x === this.x && point.y === this.y\r\n    }\r\n\r\n    getNormalised() {\r\n        if (this.x || this.y) {\r\n            const total = Math.sqrt(this.x * this.x + this.y * this.y)\r\n            return new Point(this.x / total, this.y / total)\r\n        } else {\r\n            return new Point()\r\n        }\r\n    }\r\n\r\n    getDifference(point) {\r\n        if (point instanceof Point) return new Point(point.x - this.x, point.y - this.y)\r\n    }\r\n\r\n    getMagnitude() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y)\r\n    }\r\n}\r\n\r\nexport default Point\r\n","import Point from './Point'\r\n\r\nclass Hitbox {\r\n    constructor(pointOrX, y, width, height = null) {\r\n        if (pointOrX instanceof Point) {\r\n            this.pos = new Point(pointOrX.x, pointOrX.y)\r\n            this.width = y\r\n            this.height = width\r\n        } else {\r\n            this.pos = new Point(pointOrX, y)\r\n            this.width = width\r\n            this.height = height\r\n        }\r\n    }\r\n\r\n    detectCollision(boxOrPoint) {\r\n        let box = boxOrPoint\r\n        if (boxOrPoint instanceof Point) box = new Hitbox(boxOrPoint, 0, 0)\r\n\r\n        return (\r\n            box instanceof Hitbox &&\r\n            this.x - this.width / 2 < box.x + box.width / 2 &&\r\n            box.x - box.width / 2 < this.x + this.width / 2 &&\r\n            this.y - this.height / 2 < box.y + box.height / 2 &&\r\n            box.y - box.height / 2 < this.y + this.height / 2\r\n        )\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.strokeRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height)\r\n    }\r\n\r\n    get x() {\r\n        return this.pos.x\r\n    }\r\n    set x(newX) {\r\n        this.pos.x = newX\r\n    }\r\n\r\n    get y() {\r\n        return this.pos.y\r\n    }\r\n    set y(newY) {\r\n        this.pos.y = newY\r\n    }\r\n}\r\n\r\nexport default Hitbox\r\n","import Point from '../Point'\r\n\r\nclass Node {\r\n    constructor(pointOrX, y, distanceMultiplier = 1) {\r\n        if (pointOrX instanceof Point) {\r\n            this.pos = new Point(pointOrX.x, pointOrX.y)\r\n            this.distanceMultiplier = y || 1\r\n        } else {\r\n            this.pos = new Point(pointOrX, y)\r\n            this.distanceMultiplier = distanceMultiplier\r\n        }\r\n    }\r\n\r\n    getDistance(node) {\r\n        return this.distanceMultiplier * Math.sqrt(Math.pow(this.x - node.x, 2) + Math.pow(this.y - node.y, 2))\r\n    }\r\n\r\n    get x() {\r\n        return this.pos.x\r\n    }\r\n    get y() {\r\n        return this.pos.y\r\n    }\r\n}\r\n\r\nexport default Node\r\n","function addToPriorityQueue(priorityQueue, item) {\r\n    let queueIndex = 0\r\n\r\n    for (let instance of priorityQueue) {\r\n        if (instance.totalValue < item.totalValue) {\r\n            queueIndex++\r\n        } else {\r\n            break\r\n        }\r\n    }\r\n\r\n    return [...priorityQueue.slice(0, queueIndex), item, ...priorityQueue.slice(queueIndex)]\r\n}\r\n\r\nfunction initPriorityQueue(srcNode, destNode, aList, checkLineOfSight) {\r\n    return aList.reduce((priorityQueue, { node }, index) => {\r\n        if (checkLineOfSight(srcNode, node)) {\r\n            const totalWeight = srcNode.getDistance(node)\r\n\r\n            return addToPriorityQueue(priorityQueue, {\r\n                index,\r\n                prevNodeIndex: -1,\r\n                totalValue: destNode.getDistance(node) + totalWeight,\r\n                totalWeight\r\n            })\r\n        }\r\n        return priorityQueue\r\n    }, [])\r\n}\r\n\r\nfunction aStarFinder(srcNode, destNode, aList, checkLineOfSight) {\r\n    const checkSuccess = (dest, currNode) => dest.totalWeight >= 0 && dest.totalWeight <= currNode.totalValue\r\n\r\n    let checkedNodes = []\r\n    let priorityQueue = []\r\n    let lineOfSight = true\r\n\r\n    if (!checkLineOfSight(srcNode, destNode)) {\r\n        lineOfSight = false\r\n        priorityQueue = initPriorityQueue(srcNode, destNode, aList, checkLineOfSight)\r\n    }\r\n\r\n    let dest = {\r\n        node: destNode,\r\n        totalWeight: -1,\r\n        prevNodeIndex: -1\r\n    }\r\n\r\n    let breakCounter = 10000\r\n    let currNode\r\n\r\n    while (priorityQueue.length) {\r\n        if (breakCounter-- <= 0) throw new Error('Reactor overloaded')\r\n\r\n        currNode = priorityQueue.shift()\r\n        const canSeeDest = checkLineOfSight(destNode, aList[currNode.index].node)\r\n\r\n        if (checkSuccess(dest, currNode)) break\r\n\r\n        for (let edge of aList[currNode.index].edges) {\r\n            // checks if the edge isn't already in checkedNodes\r\n            if (checkedNodes.some(node => node.index === edge)) continue\r\n\r\n            // A* calculations\r\n            const hierarchicalValue = destNode.getDistance(aList[edge].node)\r\n            const totalWeight = aList[currNode.index].node.getDistance(aList[edge].node) + currNode.totalWeight\r\n            const totalValue = hierarchicalValue + totalWeight\r\n\r\n            // Updating the dest special case since it's not part of aList\r\n            if (canSeeDest) {\r\n                const dist = destNode.getDistance(aList[currNode.index].node)\r\n                if (dest.totalWeight < 0 || dist < dest.totalWeight) {\r\n                    dest.totalWeight = dist\r\n                    dest.prevNodeIndex = currNode.index\r\n                }\r\n            }\r\n\r\n            // Checking if the edge is already in the priorityQueue and removing and re-adding it to the priority queue if its totalValue is less than the calculated totalValue\r\n            const priorityEdgeIndex = priorityQueue.findIndex(el => el.index === edge)\r\n\r\n            if (priorityEdgeIndex > -1) {\r\n                const priorityEdge = priorityQueue[priorityEdgeIndex]\r\n\r\n                if (priorityEdge.totalValue <= totalValue) continue\r\n\r\n                priorityQueue.splice(priorityEdgeIndex, 1)\r\n            }\r\n\r\n            priorityQueue = addToPriorityQueue(priorityQueue, {\r\n                index: edge,\r\n                prevNodeIndex: currNode.index,\r\n                totalValue,\r\n                totalWeight\r\n            })\r\n        }\r\n\r\n        checkedNodes.push(currNode)\r\n    }\r\n\r\n    // Backtracking over the checkedNodes to figure out what was the fastest route\r\n    let fastestRoute = [destNode.pos]\r\n    let lastIndex = dest.prevNodeIndex\r\n\r\n    while (lastIndex >= 0) {\r\n        fastestRoute.unshift(aList[lastIndex].node.pos)\r\n        lastIndex = checkedNodes.find(el => el.index === lastIndex).prevNodeIndex\r\n    }\r\n    fastestRoute.unshift(srcNode.pos)\r\n\r\n    // Hasn't found a valid path for pathfinding\r\n    if (!lineOfSight && fastestRoute.length === 2) console.log('Could not find a valid route when pathfinding')\r\n\r\n    return fastestRoute\r\n}\r\n\r\nexport default aStarFinder\r\n","import Hitbox from '../Hitbox'\r\nimport Point from '../Point'\r\nimport Node from './Node'\r\nimport aStarFinder from './AStarFinder'\r\n\r\nclass Network {\r\n    constructor(obstacles, nodeWidth, nodeHeight) {\r\n        this.obstacles = obstacles\r\n        this.nodeWidth = nodeWidth\r\n        this.nodeHeight = nodeHeight\r\n\r\n        this.adjacencyList = []\r\n        this.update = false\r\n    }\r\n\r\n    _checkLineOfSight(node1, node2) {\r\n        const gradient = (node1.y - node2.y) / (node1.x - node2.x)\r\n\r\n        const xt = gradient < 0 ? -1 : 1\r\n        const xb = gradient < 0 ? 1 : -1\r\n\r\n        const node1Top = new Point(node1.x + (xt * this.nodeWidth) / 2, node1.y - this.nodeHeight / 2)\r\n        const node1Bottom = new Point(node1.x + (xb * this.nodeWidth) / 2, node1.y + this.nodeHeight / 2)\r\n\r\n        const checkLowerBound = point => point.y > gradient * (point.x - node1Top.x) + node1Top.y\r\n        const checkUpperBound = point => point.y < gradient * (point.x - node1Bottom.x) + node1Bottom.y\r\n\r\n        const roundingOffset = 0.000000001\r\n\r\n        const surroundingBox = new Hitbox(\r\n            node1.x + (node2.x - node1.x) / 2,\r\n            node1.y + (node2.y - node1.y) / 2,\r\n            Math.max(node1.x - node2.x + this.nodeWidth, node2.x - node1.x + this.nodeWidth) - roundingOffset,\r\n            Math.max(node1.y - node2.y + this.nodeHeight, node2.y - node1.y + this.nodeHeight) - roundingOffset\r\n        )\r\n\r\n        for (let obstacle of this.obstacles) {\r\n            if (surroundingBox.detectCollision(obstacle.hitbox)) {\r\n                const obsTop = new Point(obstacle.x + (xt * obstacle.width) / 2, obstacle.y - obstacle.height / 2)\r\n                const obsBottom = new Point(obstacle.x + (xb * obstacle.width) / 2, obstacle.y + obstacle.height / 2)\r\n\r\n                if (checkLowerBound(obsBottom) && checkUpperBound(obsTop)) return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    addNode(newNode) {\r\n        if (newNode instanceof Node) {\r\n            const newInstance = { node: newNode, edges: [] }\r\n\r\n            for (let i in this.adjacencyList) {\r\n                const currIndex = Number(i)\r\n                const currNode = this.adjacencyList[currIndex].node\r\n\r\n                if (this._checkLineOfSight(newNode, currNode)) {\r\n                    newInstance.edges.push(currIndex)\r\n                    this.adjacencyList[currIndex].edges.push(this.adjacencyList.length)\r\n                }\r\n            }\r\n            this.adjacencyList.push(newInstance)\r\n        }\r\n    }\r\n\r\n    getShortestRoute(srcNode, destNode) {\r\n        return aStarFinder(srcNode, destNode, this.adjacencyList, this._checkLineOfSight.bind(this))\r\n    }\r\n\r\n    draw(ctx) {\r\n        for (let { node, edges } of this.adjacencyList) {\r\n            ctx.strokeStyle = 'blue'\r\n            ctx.strokeRect(node.x - this.nodeWidth / 2, node.y - this.nodeHeight / 2, this.nodeWidth, this.nodeHeight)\r\n            for (let edge of edges) {\r\n                ctx.strokeStyle = 'lime'\r\n                ctx.beginPath()\r\n                ctx.moveTo(node.x, node.y)\r\n                ctx.lineTo(this.adjacencyList[edge].node.x, this.adjacencyList[edge].node.y)\r\n                ctx.stroke()\r\n            }\r\n        }\r\n        ctx.strokeStyle = 'black'\r\n    }\r\n}\r\n\r\nexport default Network\r\n","import Hitbox from '../Hitbox'\r\nimport Network from './Network'\r\nimport Node from './Node'\r\n\r\nclass Pathfinder {\r\n    constructor(map) {\r\n        this.map = map\r\n        this.networks = {}\r\n    }\r\n\r\n    _getNetworkKey(box) {\r\n        return 'w' + box.width + 'h' + box.height\r\n    }\r\n\r\n    _getNetwork(box) {\r\n        const key = this._getNetworkKey(box)\r\n\r\n        if (!(key in this.networks)) {\r\n            this.addNetwork(box)\r\n        }\r\n\r\n        return this.networks[key]\r\n    }\r\n\r\n    _buildNetwork(box) {\r\n        let network = new Network(this.map.obstacles, box.width, box.height)\r\n        let nodeList = []\r\n\r\n        for (let focusedObstacle of this.map.obstacles) {\r\n            const nodes = focusedObstacle.getNodes(box)\r\n            const checkedNodes = nodes.filter(el => !this.map.checkCollision(new Hitbox(el.pos, box.width, box.height)))\r\n            for (let node of checkedNodes) nodeList.push(node)\r\n        }\r\n\r\n        for (let node of nodeList) network.addNode(node)\r\n\r\n        return network\r\n    }\r\n\r\n    updateNetworks() {\r\n        for (let network of Object.values(this.networks)) network.update = true\r\n    }\r\n\r\n    getShortestRoute(box, destinationPoint) {\r\n        const srcNode = new Node(box.pos)\r\n        const destNode = new Node(destinationPoint)\r\n        let network = this._getNetwork(box)\r\n\r\n        return network.getShortestRoute(srcNode, destNode)\r\n    }\r\n\r\n    addNetwork(box) {\r\n        if (!(box instanceof Hitbox)) return false\r\n\r\n        const key = this._getNetworkKey(box)\r\n        if (!(key in this.networks)) {\r\n            let network = this._buildNetwork(box)\r\n            this.networks[key] = network\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    drawNetwork(box, ctx) {\r\n        let network = this._getNetwork(box)\r\n        network.draw(ctx)\r\n    }\r\n}\r\n\r\nexport default Pathfinder\r\n","import Hitbox from './Hitbox'\r\n\r\nclass Entity {\r\n    constructor(x, y, width, height) {\r\n        this.hitbox = new Hitbox(x, y, width, height)\r\n    }\r\n\r\n    get pos() {\r\n        return this.hitbox.pos\r\n    }\r\n\r\n    get x() {\r\n        return this.hitbox.x\r\n    }\r\n    get y() {\r\n        return this.hitbox.y\r\n    }\r\n    get width() {\r\n        return this.hitbox.width\r\n    }\r\n    get height() {\r\n        return this.hitbox.height\r\n    }\r\n}\r\n\r\nexport default Entity\r\n","import Entity from './Entity'\r\nimport Node from './Pathfinding/Node'\r\n\r\nclass Obstacle extends Entity {\r\n    getNodes(hitbox) {\r\n        let nodes = []\r\n        for (let xDir = -1; xDir <= 1; xDir += 2) {\r\n            for (let yDir = -1; yDir <= 1; yDir += 2) {\r\n                nodes.push(\r\n                    new Node(this.x + xDir * (this.width / 2 + hitbox.width / 2), this.y + yDir * (this.height / 2 + hitbox.height / 2))\r\n                )\r\n            }\r\n        }\r\n        return nodes\r\n    }\r\n}\r\n\r\nexport default Obstacle\r\n","import Obstacle from './Obstacle'\r\n\r\nclass VillageCentre extends Obstacle {\r\n    constructor(x, y) {\r\n        super(x, y, 40, 40)\r\n    }\r\n}\r\n\r\nexport default VillageCentre\r\n","class Task {\r\n    constructor(name, action, data = {}) {\r\n        this.name = name\r\n        this.action = action\r\n        this.data = data\r\n\r\n        return this\r\n    }\r\n}\r\n\r\nexport default Task\r\n","import Entity from './Entity'\r\nimport Hitbox from './Hitbox'\r\nimport Task from './Task'\r\n\r\nimport still_path from '../assets/images/villager/still.png'\r\nconst still = new Image()\r\nstill.src = still_path\r\n\r\nclass Villager extends Entity {\r\n    constructor(map, x, y) {\r\n        const sideLength = still.width * 2\r\n        super(x, y, sideLength, sideLength)\r\n\r\n        this.map = map\r\n\r\n        this.actions = {\r\n            pathfind: function(task) {\r\n                if (!('points' in task.data)) task.data.points = this.map.pathfind(this.hitbox, task.data.hitbox.pos)\r\n                if (task.data.points.length && this.pos.checkEquals(task.data.points[0])) task.data.points.shift()\r\n                if (!task.data.points.length) return true\r\n                this.moveTo(task.data.points[0])\r\n            }\r\n        }\r\n        this.taskQueue = []\r\n        this.speed = 1\r\n    }\r\n\r\n    moveTo(point) {\r\n        const diff = this.pos.getDifference(point)\r\n        const norm = diff.getNormalised()\r\n\r\n        const diffMagnitude = diff.getMagnitude()\r\n        if (diffMagnitude < this.speed) {\r\n            norm.multiply(diffMagnitude)\r\n        } else {\r\n            norm.multiply(this.speed)\r\n        }\r\n\r\n        this.pos.add(norm)\r\n    }\r\n\r\n    addTask(task) {\r\n        if (!(task instanceof Task)) return\r\n\r\n        this.taskQueue.push(task)\r\n    }\r\n\r\n    update() {\r\n        if (this.taskQueue.length > 0) {\r\n            const done = this.actions[this.taskQueue[0].action].call(this, this.taskQueue[0])\r\n\r\n            if (done === true) this.taskQueue.shift()\r\n        } else {\r\n            let dest\r\n            do dest = new Hitbox(Math.random() * 960, Math.random() * 540, this.width, this.height)\r\n            while (this.map.checkCollision(dest))\r\n            this.taskQueue.push(new Task('Random pathing', 'pathfind', { hitbox: dest }))\r\n        }\r\n    }\r\n\r\n    draw(ctx) {\r\n        const img = still\r\n        const imgWidth = img.width * 2\r\n        const imgHeight = img.height * 2\r\n\r\n        const task = this.taskQueue[0]\r\n\r\n        ctx.strokeStyle = 'red'\r\n        if (task && 'points' in task.data) {\r\n            const points = [this.pos].concat(task.data.points)\r\n\r\n            for (let i = 1; i < points.length; i++) {\r\n                ctx.strokeStyle = `rgb(${255 - ((i - 1) / (points.length - 1)) * 255}, 0, 0)`\r\n                ctx.beginPath()\r\n                ctx.moveTo(points[i - 1].x, points[i - 1].y)\r\n                ctx.lineTo(points[i].x, points[i].y)\r\n                ctx.stroke()\r\n            }\r\n        }\r\n\r\n        ctx.strokeStyle = 'white'\r\n        ctx.drawImage(img, this.pos.x - imgWidth / 2, this.pos.y - imgHeight, imgWidth, imgHeight)\r\n    }\r\n}\r\n\r\nexport default Villager\r\n","import VillageCentre from './VillageCentre'\r\nimport Villager from './Villager'\r\n\r\nclass Village {\r\n    constructor(map, x, y) {\r\n        this.villageCentre = new VillageCentre(x, y)\r\n        this.map = map\r\n        this.villagers = []\r\n\r\n        this.map.registerObstacle(this.villageCentre)\r\n\r\n        for (var i = 0; i < 5; i++) {\r\n            let newVillager = new Villager(this.map, Math.random() * 960, Math.random() * 540)\r\n            this.villagers.push(newVillager)\r\n        }\r\n    }\r\n\r\n    update() {\r\n        for (let villager of this.villagers) villager.update()\r\n    }\r\n\r\n    draw(ctx) {\r\n        for (let villager of this.villagers) villager.draw(ctx)\r\n    }\r\n}\r\n\r\nexport default Village\r\n","import Obstacle from '../Obstacle'\r\n\r\nclass BaseResource extends Obstacle {\r\n    constructor(quantity, x, y, width, height) {\r\n        super(x, y, width, height)\r\n\r\n        this.quantity = quantity\r\n        this.depleted = false\r\n    }\r\n\r\n    gather(quantityToTake) {\r\n        if (this.quantity - quantityToTake > 0) return quantityToTake\r\n        else {\r\n            this.depleted = true\r\n            this.quantity = 0\r\n            return this.quantity\r\n        }\r\n    }\r\n}\r\n\r\nexport default BaseResource\r\n","import BaseResource from './BaseResource'\r\n\r\nclass GoldDeposit extends BaseResource {\r\n    draw(ctx) {\r\n        ctx.stokeStyle = 'gold'\r\n        ctx.strokeRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height)\r\n    }\r\n}\r\n\r\nexport default GoldDeposit\r\n","import Pathfinder from './Pathfinding/Pathfinder'\r\nimport Village from './Village'\r\n\r\nimport Obstacle from './Obstacle'\r\nimport Hitbox from './Hitbox'\r\nimport GoldDeposit from './Resources/GoldDeposit'\r\n\r\nclass Map {\r\n    constructor(mapLimit) {\r\n        this.mapLimit = mapLimit\r\n        this.pathfinder = new Pathfinder(this)\r\n\r\n        this.obstacles = []\r\n        this.villages = [new Village(this, this.mapLimit.x / 2, this.mapLimit.y / 2)]\r\n\r\n        for (let i = 0; i < 10; i++)\r\n            this.registerObstacle(new Obstacle(Math.random() * this.mapLimit.x, Math.random() * this.mapLimit.y, 40, 20))\r\n        this._testHitbox = new Hitbox(Math.random() * 960, Math.random() * 540, 16, 16)\r\n        this.gold = new GoldDeposit(1500, 100, 100, 20, 20)\r\n\r\n        this.registerObstacle(this.gold)\r\n\r\n        this.pathfinder.addNetwork(this._testHitbox)\r\n    }\r\n\r\n    registerObstacle(obstacle) {\r\n        this.obstacles.push(obstacle)\r\n        this.pathfinder.updateNetworks()\r\n    }\r\n\r\n    checkCollision(box) {\r\n        if (box.x < 0 || box.y < 0 || box.x + box.width > this.mapLimit.x || box.y + box.height > this.mapLimit.y) return true\r\n\r\n        for (let obstacle of this.obstacles) {\r\n            if (box.detectCollision(obstacle.hitbox)) return true\r\n        }\r\n    }\r\n\r\n    pathfind(box, destinationPoint) {\r\n        return this.pathfinder.getShortestRoute(box, destinationPoint)\r\n    }\r\n\r\n    update() {\r\n        for (let village of this.villages) village.update()\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.pathfinder.drawNetwork(this._testHitbox, ctx)\r\n        for (let obstacle of this.obstacles) obstacle.hitbox.draw(ctx)\r\n        for (let village of this.villages) village.draw(ctx)\r\n        this.gold.draw(ctx)\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import Map from './Map'\r\nimport Point from './Point'\r\n\r\nclass Engine {\r\n    constructor(canvas, ctx) {\r\n        this.canvas = canvas\r\n        this.ctx = ctx\r\n\r\n        // this.lastTime = null\r\n        this.map = new Map(new Point(canvas.width, canvas.height))\r\n    }\r\n\r\n    update() {\r\n        this.map.update()\r\n    }\r\n\r\n    draw() {\r\n        // const currTime = Date.now()\r\n        // const dt = currTime - this.lastTime\r\n        // this.lastTime = currTime\r\n\r\n        this.ctx.fillStyle = 'white'\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n        this.ctx.fillStyle = 'black'\r\n        this.ctx.strokeStyle = 'black'\r\n\r\n        this.map.draw(this.ctx)\r\n    }\r\n}\r\n\r\nexport default Engine\r\n","import Engine from './src/Engine'\r\n\r\nlet canvas = document.getElementById('game-canvas')\r\nlet ctx = canvas.getContext('2d')\r\nctx.imageSmoothingEnabled = false\r\n\r\nconst game = new Engine(canvas, ctx)\r\n\r\nfunction run() {\r\n    game.update()\r\n    game.draw()\r\n\r\n    requestAnimationFrame(run)\r\n}\r\n\r\nrun()\r\n"]}